{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"configure-the-extension/","text":"Configure the extension \u00b6 The extension offers a number of settings. These can be configured by modifying your user or workspace settings or by modifying the settings.json file of VS Code. Basic configurations \u00b6 These configurations are the basic ones, which are used by the extension users. ID Description ballerina.codeLens.all.enabled Enable CodeLens that appear in the editor view. ballerina.enableConfigurableEditor Enable the configurable editor. This will open a form to set values for configurable variables in the code when you [run]( ) the Ballerina code. ballerina.enableNotebookDebug Enable the debug feature in Ballerina notebook files ( .balnotebook ). ballerina.enablePerformanceForecast Enable the performance forecaster. This will show you the forecasted latency and other performance values for Ballerina services in the low-code diagram. ballerina.enableSemanticHighlighting Enable semantic code highlighting . ballerina.enableTelemetry Enable telemetry logging. This will send log data to the extension developers. This will help developers to improve the extension. ballerina.experimental Enable the experimental features of the Ballerin VS Code extension. ballerina.home Set the Ballerina installation location. ballerina.pluginDevMode must be enabled to use this. ballerina.lowCodeMode Enable the Ballerina low-code mode. This will open the Diagram View by default for Ballerina codes. This will focus the Diagram View explorer in the side menu when VS Code opens. ballerina.pluginDevMode Enable the developer mode. Advanced configurations \u00b6 These configurations are related to the extension development process and not useful for the extension users. ID Description ballerina.enableLanguageServerDebug Enable language server debugging. ballerina.debugLog Enable the debug logs of the extension. This will print the extension debug logs to the Ballerina output channel in the VS Code output window.","title":"Configure the extension"},{"location":"configure-the-extension/#configure-the-extension","text":"The extension offers a number of settings. These can be configured by modifying your user or workspace settings or by modifying the settings.json file of VS Code.","title":"Configure the extension"},{"location":"configure-the-extension/#basic-configurations","text":"These configurations are the basic ones, which are used by the extension users. ID Description ballerina.codeLens.all.enabled Enable CodeLens that appear in the editor view. ballerina.enableConfigurableEditor Enable the configurable editor. This will open a form to set values for configurable variables in the code when you [run]( ) the Ballerina code. ballerina.enableNotebookDebug Enable the debug feature in Ballerina notebook files ( .balnotebook ). ballerina.enablePerformanceForecast Enable the performance forecaster. This will show you the forecasted latency and other performance values for Ballerina services in the low-code diagram. ballerina.enableSemanticHighlighting Enable semantic code highlighting . ballerina.enableTelemetry Enable telemetry logging. This will send log data to the extension developers. This will help developers to improve the extension. ballerina.experimental Enable the experimental features of the Ballerin VS Code extension. ballerina.home Set the Ballerina installation location. ballerina.pluginDevMode must be enabled to use this. ballerina.lowCodeMode Enable the Ballerina low-code mode. This will open the Diagram View by default for Ballerina codes. This will focus the Diagram View explorer in the side menu when VS Code opens. ballerina.pluginDevMode Enable the developer mode.","title":"Basic configurations"},{"location":"configure-the-extension/#advanced-configurations","text":"These configurations are related to the extension development process and not useful for the extension users. ID Description ballerina.enableLanguageServerDebug Enable language server debugging. ballerina.debugLog Enable the debug logs of the extension. This will print the extension debug logs to the Ballerina output channel in the VS Code output window.","title":"Advanced configurations"},{"location":"debug-the-code/","text":"Debug the code \u00b6 When writing large-scale applications with complex logic, you may encounter syntax, semantic, or runtime issues in your code. The Ballerina compiler comes in handy when detecting syntax and semantic issues. However, it is impossible for a compiler to detect runtime errors like logical errors because they occur during the program execution after a successful compilation. This is where the dedicated debugging tooling support becomes important. Currently, a feature-rich debugging experience for troubleshooting Ballerina applications is provided via the Ballerina Visual Studio Code extension . Debug using CodeLens \u00b6 The Ballerina extension provides multiple options to debug Ballerina applications and the most convenient way will be using the context-aware debug CodeLens support. However, if you require launching debug sessions with additional configurations (i.e., program arguments, environment variables), you can use the launch.json configurations. Info For more information, see Debug using configurations . Program debug sessions \u00b6 Follow the steps below to start a quick debug session using CodeLens. Open the folder, which includes the Ballerina program you want to debug and open the source file in the editor. Add the debug points you require by clicking in front of the line numbers of the file you want to debug. Click the Debug CodeLens, which will appear just above the main() method. Test debug sessions \u00b6 The Ballerina test functions can also be debugged using CodeLens. The debug CodeLens will automatically appear on top of each Ballerina test function and you are able to execute/debug only the selected test case by clicking on the corresponding CodeLens as shown below. Debug using configurations \u00b6 Follow the steps below to start a debug session with configurations. All the configurations need to be added in the launch.json file. Open the folder, which includes the Ballerina program you want to debug and select the file. Press the Ctrl + Shift + D keys (for macOS: \u2318 + \u2191 + D ) to launch the Debugger view. Click create a launch.json file and then select Ballerina Debug as the Environment . Add/edit the relevant configurations for debugging in the opened launch.json file. Info For instructions on the configuration attributes, see Configuration attributes . Add the debug points you require by clicking in front of the line numbers of the file you want to debug. Start a program, test, or remote debug session as shown below. Info If you launch the debug session through VS Code, the working directory will be the Ballerina package root. However, you can use remote debugging for alternative working directories. Program debug sessions \u00b6 Follow the steps below to start a program debug session. Select Ballerina Debug from the drop-down available in the upper left corner to start a program debugging session. Click the Start Debugging icon on the upper left corner to start debugging. You will see the output in the DEBUG CONSOLE . Test debug sessions \u00b6 Follow the steps below to start a test debug session. Select Ballerina Test from the drop-down menu available in the upper-left corner to start a test debugging session. Click the Start Debugging icon in the upper-left corner to start debugging. You will see the output in the DEBUG CONSOLE as shown below. Remote debug sessions \u00b6 Follow the steps below to start a remote debug session. Create the launch.json configuration file if it is not created already. For instructions on creating the launch.json file, see Set up debugging configurations . Open the launch.json file and configure the debuggeeHost and debuggeePort attributes under the Ballerina Remote configurations section accordingly. After setting the remote debug configurations, select Ballerina Remote from the drop-down available in the upper left corner to start a remote debugging session. Open a terminal and execute the debug command that is relevant to your requirement from the ones below: Command Description bal run --debug <DEBUGGEE_PORT> <BAL_FILE_PATH/PACKAGE_PATH> Debugging a Ballerina package or a single file bal run --debug <DEBUGGEE_PORT> <EXECUTABLE_JAR_FILE_PATH> Debugging a Ballerina executable JAR bal test --debug <DEBUGGEE_PORT> <PACKAGE_PATH> Debugging Ballerina tests The terminal will show the following log: Listening for transport dt_socket at address: 5005 Click the Start Debugging icon on the upper-left corner to start debugging. You will see the output in the DEBUG CONSOLE as shown below. Set up debugging configurations \u00b6 The Ballerina debugger supports various debug configuration options via the launch.json file. Create the configuration file \u00b6 You can either add the configurations to the existing launch.json file, which is located in your workspace root under the .vscode directory or follow the steps below to generate the launch.json configurations file with the default values. Click the Run and Debug icon in the left menu or press the Control + Shift + D keys to launch the Debugger view (for Mac - Command + Shift +D ). Click create a launch.json file and select Ballerina Debug . Given below are the default configurations generated for debugging Ballerina: { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Ballerina Debug\", \"type\": \"ballerina\", \"request\": \"launch\", \"programArgs\": [], \"commandOptions\": [], \"env\": {} }, { \"name\": \"Ballerina Test\", \"type\": \"ballerina\", \"request\": \"launch\", \"debugTests\": true, \"programArgs\": [], \"commandOptions\": [], \"env\": {} }, { \"name\": \"Ballerina Remote\", \"type\": \"ballerina\", \"request\": \"attach\", \"debuggeeHost\": \"127.0.0.1\", \"debuggeePort\": \"5005\" } ] } Configuration attributes \u00b6 The auto-generated launch.json file consists of three debug configurations named Ballerina Debug , Ballerina Test , and Ballerina Remote . Each configuration supports a different set of attributes, which will be provided via IntelliSense completion suggestions. The following attributes are mandatory for all configurations. Attribute Description name The reader-friendly name to appear in the Debug launch configuration drop-down menu. type The type of debugger to use for this launch configuration. The attribute value must be kept as ballerina for all Ballerina debugging configuration types. request The request type of this launch configuration. Currently, launch and attach are supported. The following attributes are supported for all Ballerina launch configurations. Attribute Description programArgs Any program arguments that are required to be passed into the main function of the Ballerina program to be launched can be passed as a list of strings. commandOptions If required, you can configure command options for the Ballerina program to be launched as a list of strings. You can see the list of all the available command options by executing the following CLI commands in your terminal. - For the Ballerina Debug configuration: bal run --help - For the Ballerina test configuration: bal test --help env Any environment variables you need to configure for launching the Ballerina program can be passed as a map of strings (name and value). debugTests Indicates whether to debug the tests for the given script. The following attributes are supported for all Ballerina attach configurations. Attribute Description debuggeeHost Host address of the remote process to be attached (if not specified, the default value will be the localhost( 127.0.0.1 )). debuggeePort Port number of the remote process to be attached. Use the debugging features \u00b6 The following debugging features are currently supported by the Ballerina VScode extension. Conditional breakpoints \u00b6 The Ballerina debugger provides the ability of setting Ballerina expression-based conditions for regular breakpoints. The debugger will suspend at the breakpoint whenever the expression evaluates to true. Logpoints \u00b6 Logpoints are another variant of breakpoints, which do not \"break\" the program execution and instead, log a message to the console. Logpoints are especially useful for injecting logging while debugging production servers that cannot be paused or stopped. Logpoints can also be enabled/disabled and can be controlled by conditions similar to regular breakpoints. Log messages can either be plain texts or string templates, which can contain expressions to be evaluated within the ${} syntax. Pause and continue \u00b6 Any running Ballerina programs can be suspended immediately at the current execution line of the program using the pause command in VS Code as shown below. With this feature, you are able to suspend (and resume) the remote VM resulting in a debug hit at the current execution line of the program. This feature will be useful in contexts where the program seems to be hanged due to blocking operations/infinite loops and when you want to know the exact line that the program is waiting on. Expression evaluation \u00b6 Ballerina expression evaluator allows evaluating Ballerina variables and expressions at runtime by allowing them to be viewed when the IDE is in the break mode. The Ballerina VSCode debugger lets you evaluate expressions in the ways below. Use the debug console You can evaluate expressions using the debug console as shown below. Use the watch window You can evaluate expressions using the watch window as shown below. Info For more information on the VS Code debugging features, go to VS Code documentation .","title":"Debug the code"},{"location":"debug-the-code/#debug-the-code","text":"When writing large-scale applications with complex logic, you may encounter syntax, semantic, or runtime issues in your code. The Ballerina compiler comes in handy when detecting syntax and semantic issues. However, it is impossible for a compiler to detect runtime errors like logical errors because they occur during the program execution after a successful compilation. This is where the dedicated debugging tooling support becomes important. Currently, a feature-rich debugging experience for troubleshooting Ballerina applications is provided via the Ballerina Visual Studio Code extension .","title":"Debug the code"},{"location":"debug-the-code/#debug-using-codelens","text":"The Ballerina extension provides multiple options to debug Ballerina applications and the most convenient way will be using the context-aware debug CodeLens support. However, if you require launching debug sessions with additional configurations (i.e., program arguments, environment variables), you can use the launch.json configurations. Info For more information, see Debug using configurations .","title":"Debug using CodeLens"},{"location":"debug-the-code/#program-debug-sessions","text":"Follow the steps below to start a quick debug session using CodeLens. Open the folder, which includes the Ballerina program you want to debug and open the source file in the editor. Add the debug points you require by clicking in front of the line numbers of the file you want to debug. Click the Debug CodeLens, which will appear just above the main() method.","title":"Program debug sessions"},{"location":"debug-the-code/#test-debug-sessions","text":"The Ballerina test functions can also be debugged using CodeLens. The debug CodeLens will automatically appear on top of each Ballerina test function and you are able to execute/debug only the selected test case by clicking on the corresponding CodeLens as shown below.","title":"Test debug sessions"},{"location":"debug-the-code/#debug-using-configurations","text":"Follow the steps below to start a debug session with configurations. All the configurations need to be added in the launch.json file. Open the folder, which includes the Ballerina program you want to debug and select the file. Press the Ctrl + Shift + D keys (for macOS: \u2318 + \u2191 + D ) to launch the Debugger view. Click create a launch.json file and then select Ballerina Debug as the Environment . Add/edit the relevant configurations for debugging in the opened launch.json file. Info For instructions on the configuration attributes, see Configuration attributes . Add the debug points you require by clicking in front of the line numbers of the file you want to debug. Start a program, test, or remote debug session as shown below. Info If you launch the debug session through VS Code, the working directory will be the Ballerina package root. However, you can use remote debugging for alternative working directories.","title":"Debug using configurations"},{"location":"debug-the-code/#program-debug-sessions_1","text":"Follow the steps below to start a program debug session. Select Ballerina Debug from the drop-down available in the upper left corner to start a program debugging session. Click the Start Debugging icon on the upper left corner to start debugging. You will see the output in the DEBUG CONSOLE .","title":"Program debug sessions"},{"location":"debug-the-code/#test-debug-sessions_1","text":"Follow the steps below to start a test debug session. Select Ballerina Test from the drop-down menu available in the upper-left corner to start a test debugging session. Click the Start Debugging icon in the upper-left corner to start debugging. You will see the output in the DEBUG CONSOLE as shown below.","title":"Test debug sessions"},{"location":"debug-the-code/#remote-debug-sessions","text":"Follow the steps below to start a remote debug session. Create the launch.json configuration file if it is not created already. For instructions on creating the launch.json file, see Set up debugging configurations . Open the launch.json file and configure the debuggeeHost and debuggeePort attributes under the Ballerina Remote configurations section accordingly. After setting the remote debug configurations, select Ballerina Remote from the drop-down available in the upper left corner to start a remote debugging session. Open a terminal and execute the debug command that is relevant to your requirement from the ones below: Command Description bal run --debug <DEBUGGEE_PORT> <BAL_FILE_PATH/PACKAGE_PATH> Debugging a Ballerina package or a single file bal run --debug <DEBUGGEE_PORT> <EXECUTABLE_JAR_FILE_PATH> Debugging a Ballerina executable JAR bal test --debug <DEBUGGEE_PORT> <PACKAGE_PATH> Debugging Ballerina tests The terminal will show the following log: Listening for transport dt_socket at address: 5005 Click the Start Debugging icon on the upper-left corner to start debugging. You will see the output in the DEBUG CONSOLE as shown below.","title":"Remote debug sessions"},{"location":"debug-the-code/#set-up-debugging-configurations","text":"The Ballerina debugger supports various debug configuration options via the launch.json file.","title":"Set up debugging configurations"},{"location":"debug-the-code/#create-the-configuration-file","text":"You can either add the configurations to the existing launch.json file, which is located in your workspace root under the .vscode directory or follow the steps below to generate the launch.json configurations file with the default values. Click the Run and Debug icon in the left menu or press the Control + Shift + D keys to launch the Debugger view (for Mac - Command + Shift +D ). Click create a launch.json file and select Ballerina Debug . Given below are the default configurations generated for debugging Ballerina: { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Ballerina Debug\", \"type\": \"ballerina\", \"request\": \"launch\", \"programArgs\": [], \"commandOptions\": [], \"env\": {} }, { \"name\": \"Ballerina Test\", \"type\": \"ballerina\", \"request\": \"launch\", \"debugTests\": true, \"programArgs\": [], \"commandOptions\": [], \"env\": {} }, { \"name\": \"Ballerina Remote\", \"type\": \"ballerina\", \"request\": \"attach\", \"debuggeeHost\": \"127.0.0.1\", \"debuggeePort\": \"5005\" } ] }","title":"Create the configuration file"},{"location":"debug-the-code/#configuration-attributes","text":"The auto-generated launch.json file consists of three debug configurations named Ballerina Debug , Ballerina Test , and Ballerina Remote . Each configuration supports a different set of attributes, which will be provided via IntelliSense completion suggestions. The following attributes are mandatory for all configurations. Attribute Description name The reader-friendly name to appear in the Debug launch configuration drop-down menu. type The type of debugger to use for this launch configuration. The attribute value must be kept as ballerina for all Ballerina debugging configuration types. request The request type of this launch configuration. Currently, launch and attach are supported. The following attributes are supported for all Ballerina launch configurations. Attribute Description programArgs Any program arguments that are required to be passed into the main function of the Ballerina program to be launched can be passed as a list of strings. commandOptions If required, you can configure command options for the Ballerina program to be launched as a list of strings. You can see the list of all the available command options by executing the following CLI commands in your terminal. - For the Ballerina Debug configuration: bal run --help - For the Ballerina test configuration: bal test --help env Any environment variables you need to configure for launching the Ballerina program can be passed as a map of strings (name and value). debugTests Indicates whether to debug the tests for the given script. The following attributes are supported for all Ballerina attach configurations. Attribute Description debuggeeHost Host address of the remote process to be attached (if not specified, the default value will be the localhost( 127.0.0.1 )). debuggeePort Port number of the remote process to be attached.","title":"Configuration attributes"},{"location":"debug-the-code/#use-the-debugging-features","text":"The following debugging features are currently supported by the Ballerina VScode extension.","title":"Use the debugging features"},{"location":"debug-the-code/#conditional-breakpoints","text":"The Ballerina debugger provides the ability of setting Ballerina expression-based conditions for regular breakpoints. The debugger will suspend at the breakpoint whenever the expression evaluates to true.","title":"Conditional breakpoints"},{"location":"debug-the-code/#logpoints","text":"Logpoints are another variant of breakpoints, which do not \"break\" the program execution and instead, log a message to the console. Logpoints are especially useful for injecting logging while debugging production servers that cannot be paused or stopped. Logpoints can also be enabled/disabled and can be controlled by conditions similar to regular breakpoints. Log messages can either be plain texts or string templates, which can contain expressions to be evaluated within the ${} syntax.","title":"Logpoints"},{"location":"debug-the-code/#pause-and-continue","text":"Any running Ballerina programs can be suspended immediately at the current execution line of the program using the pause command in VS Code as shown below. With this feature, you are able to suspend (and resume) the remote VM resulting in a debug hit at the current execution line of the program. This feature will be useful in contexts where the program seems to be hanged due to blocking operations/infinite loops and when you want to know the exact line that the program is waiting on.","title":"Pause and continue"},{"location":"debug-the-code/#expression-evaluation","text":"Ballerina expression evaluator allows evaluating Ballerina variables and expressions at runtime by allowing them to be viewed when the IDE is in the break mode. The Ballerina VSCode debugger lets you evaluate expressions in the ways below.","title":"Expression evaluation"},{"location":"license/","text":"Ballerina VS Code extension license \u00b6 WSO2 grants you a worldwide, non-exclusive right to copy and use the Ballerina Visual Studio Code extension in accordance with its license terms. For the license terms, see the Ballerina VS Code extension license terms .","title":"License"},{"location":"license/#ballerina-vs-code-extension-license","text":"WSO2 grants you a worldwide, non-exclusive right to copy and use the Ballerina Visual Studio Code extension in accordance with its license terms. For the license terms, see the Ballerina VS Code extension license terms .","title":"Ballerina VS Code extension license"},{"location":"notebooks/","text":"Notebooks \u00b6 Ballerina notebook is a canvas, which combines Markdown text and executable Ballerina source code. Markdown and Ballerina code snippets are supported by Ballerina notebook cells. Info Make sure your VS Code version is 1.67.0 or higher when using Ballerina notebooks. Create a notebook \u00b6 Ballerina notebooks can be created in the VS Code editor using the .balnotebook extension for filenames. You can create a notebook with the given filename via the Command Palatte of the VS Code editor as shown below. Execute the code \u00b6 Notebook cells can be executed using the Run button available at the left-hand side of the cell or using the shift + enter keys. Tip Additionally, the Run All , Execute Above Cells , Execute Cell and Below , Clear outputs of All Cells , and Restart Notebook actions are available through the user interface. Edit the code \u00b6 You can use IntelliSense features to edit the code on notebooks as shown below. View variables \u00b6 You can view variables in notebooks as shown below. Debug notebooks \u00b6 To debug Ballerina notebooks use the provided option as shown below. Tip You need to enable the debug mode via the VS Code extension settings as shown below.","title":"Notebooks"},{"location":"notebooks/#notebooks","text":"Ballerina notebook is a canvas, which combines Markdown text and executable Ballerina source code. Markdown and Ballerina code snippets are supported by Ballerina notebook cells. Info Make sure your VS Code version is 1.67.0 or higher when using Ballerina notebooks.","title":"Notebooks"},{"location":"notebooks/#create-a-notebook","text":"Ballerina notebooks can be created in the VS Code editor using the .balnotebook extension for filenames. You can create a notebook with the given filename via the Command Palatte of the VS Code editor as shown below.","title":"Create a notebook"},{"location":"notebooks/#execute-the-code","text":"Notebook cells can be executed using the Run button available at the left-hand side of the cell or using the shift + enter keys. Tip Additionally, the Run All , Execute Above Cells , Execute Cell and Below , Clear outputs of All Cells , and Restart Notebook actions are available through the user interface.","title":"Execute the code"},{"location":"notebooks/#edit-the-code","text":"You can use IntelliSense features to edit the code on notebooks as shown below.","title":"Edit the code"},{"location":"notebooks/#view-variables","text":"You can view variables in notebooks as shown below.","title":"View variables"},{"location":"notebooks/#debug-notebooks","text":"To debug Ballerina notebooks use the provided option as shown below. Tip You need to enable the debug mode via the VS Code extension settings as shown below.","title":"Debug notebooks"},{"location":"edit-the-code/code-actions/","text":"Code actions \u00b6 Code actions is a feature in the VS Code Editor that enables quick fixes and code refactoring suggestions. The Ballerina VS Code extension enables the following code actions. Quick fixes \u00b6 Quick fixes are suggested based on the diagnostics displayed at a given cursor position. The Ballerina VS Code extension provides a wide range of quick fixes to such diagnostics. Variable assignment \u00b6 The following code actions are available as quick fixes when the Variable assignment required diagnostic is identified in your code. Code action Description Create variable Create a variable for an expression. Create variable and type guard Create a type guard to handle the error gracefully. Create variable and check error Add a check expression. Ignore return value Ignore the return value of a function call or a method call with _ . Type inference \u00b6 The following quick fixes are available for type inference. Code action Description Create variable with type Create a variable for a remote method expression in which the Cannot infer the 'typedesc' argument for parameter diagnostic is present. Missing check expressions \u00b6 The following quick fixes are available for missing check expressions. Code action Description Add 'check' error Add the check keyword when the selected expression's type is a subtype of error or a union with an error member while the expected type doesn't contain an error . Check expressions \u00b6 The following quick fixes are available for check expressions. Code action Description Surround with do/on-fail Surround a check expression with a do/on-fail clause. Change return type to 'error?' Change the return type of a function/method to error? . Imports \u00b6 The following quick fixes are available for imports. Code action Description Import module Add the import statement for a module that has a reference without an import statement. Pull unresolved module Pull one or more Ballerina packages (which are imported in the source and are unavailable locally) from Ballerina central. Remove import Remove an unused or re-declared module import. Remove all unused imports Remove all unused imports except when there is a re-declared import statement. Documentation \u00b6 The following quick fixes are available for documentation. Code action Description Document this Add the documentation to the closest node that can be documented clause. Update documentation Update the existing documentation when parameters are missing or not documented. This depends on the warning diagnostics issued by the compiler. Incompatible types \u00b6 The following quick fixes are available for incompatible types. Code action Description Change variable type Change the type of variable. Add type cast Add a type cast for the incompatible type. Change return type Change the incompatible return type of a function/method. Change parameter type Add a conditional default value for the incompatible type. Add conditional default value Ignore the return value of a function call or a method call with _ . Convert to 'xml'/'string' template Convert a raw template into a subtype ( xml or string ). Add type cast for numeric expressions Add a type cast for an unsupported numeric expression. The Change variable type , Change parameter type , Add type cast , and Change return type quick fixes are demonstrated below. The Add conditional default value and Convert to 'xml'/'string' template quick fixes are demonstrated below. Functions \u00b6 The following quick fixes are available for creating functions. Code action Description Create function Create a function when there's an undefined function invoked by a function call expression. Implement method Implement an unimplemented method declared by an included object type. Implement all Implement all the methods declared by an included object type. Add explicit return statement Add an explicit return statement to a function. Convert to public function Add a public access modifier to a function definition. Add isolated qualifier Add an isolated qualifier to a function. The Create function , Implement method , and Implement all quick fixes are demonstrated below. The Add explicit return statement , Convert to public function , and Add isolated qualifier quick fixes are demonstrated below. Records \u00b6 The following quick fixes are available for records. Code action Description Create record Create a record for an unknown type clause. Fill record fields Add missing record fields to a mapping constructor expression. Annotations \u00b6 The following quick fixes are available for annotations. Code action Description Convert to constant Convert an annotation declaration to a constant annotation declaration clause. Other quick fixes \u00b6 Code action Description Convert to readonly clone Convert an e expression to e.cloneReadOnly() . Ignore unused variable Ignore an unused variable. Make construct pubic Make a construct public where the attempt to expose non-public symbol warning is present. Convert module variable to listener declaration Convert a module var declaration statement to a listener declaration. Remove unreachable code Remove unreachable statements. The Convert to readonly clone , Ignore unused variable , and Remove unreachable code quick fixes are demonstrated below. The Make construct public quick fix is demonstrated below. The Convert module variable to listener declaration quick fix is demonstrated below. Refactoring actions \u00b6 Refactoring actions are suggested when the existing code can be rearranged or restructured to improve the quality and maintainability of your code while ensuring that the overall behavior of the code remains unaffected. Extract to code actions \u00b6 The following refactoring actions are available for extracting expressions. Code action Description Extract to constant Extract a constant expression to a constant. Extract to function Extract an expression or a statement to a function. Extract to local variable Extract an expression to a local variable. Extract type Extract anonymous records to record types. Rewrite code actions \u00b6 The following refactoring actions are available as rewrite actions. Code action Description Map with a query expression When both the right-hand side (RHS) and left-hand side (LHS) types are array types, convert the RHS to a query expression. You can modify the query expression with additional clauses and mappings later. Source actions \u00b6 Source actions are used to generate common code structures and recurring elements. Generate getters and setters \u00b6 The following source actions are available for generating getters and setters. Code action Description Create a getter Generate a getter for class-level variables. Create a setter Generate a setter for class-level variables. Create getter and setter Generate both getter and setter for class-level variables. Variables \u00b6 The following source actions are available for variables. Code action Description Type guard variable Type guard a variable if the variable type is a union type. Imports \u00b6 The following source actions are available for imports. Code action Description Optimize imports Optimize import statements to remove unused imports and arrange imports in alphabetical order. Documentation \u00b6 The following source actions are available for documentations. Code action Description Document all Document all the top-level constructs.","title":"Code actions"},{"location":"edit-the-code/code-actions/#code-actions","text":"Code actions is a feature in the VS Code Editor that enables quick fixes and code refactoring suggestions. The Ballerina VS Code extension enables the following code actions.","title":"Code actions"},{"location":"edit-the-code/code-actions/#quick-fixes","text":"Quick fixes are suggested based on the diagnostics displayed at a given cursor position. The Ballerina VS Code extension provides a wide range of quick fixes to such diagnostics.","title":"Quick fixes"},{"location":"edit-the-code/code-actions/#variable-assignment","text":"The following code actions are available as quick fixes when the Variable assignment required diagnostic is identified in your code. Code action Description Create variable Create a variable for an expression. Create variable and type guard Create a type guard to handle the error gracefully. Create variable and check error Add a check expression. Ignore return value Ignore the return value of a function call or a method call with _ .","title":"Variable assignment"},{"location":"edit-the-code/code-actions/#type-inference","text":"The following quick fixes are available for type inference. Code action Description Create variable with type Create a variable for a remote method expression in which the Cannot infer the 'typedesc' argument for parameter diagnostic is present.","title":"Type inference"},{"location":"edit-the-code/code-actions/#missing-check-expressions","text":"The following quick fixes are available for missing check expressions. Code action Description Add 'check' error Add the check keyword when the selected expression's type is a subtype of error or a union with an error member while the expected type doesn't contain an error .","title":"Missing check expressions"},{"location":"edit-the-code/code-actions/#check-expressions","text":"The following quick fixes are available for check expressions. Code action Description Surround with do/on-fail Surround a check expression with a do/on-fail clause. Change return type to 'error?' Change the return type of a function/method to error? .","title":"Check expressions"},{"location":"edit-the-code/code-actions/#imports","text":"The following quick fixes are available for imports. Code action Description Import module Add the import statement for a module that has a reference without an import statement. Pull unresolved module Pull one or more Ballerina packages (which are imported in the source and are unavailable locally) from Ballerina central. Remove import Remove an unused or re-declared module import. Remove all unused imports Remove all unused imports except when there is a re-declared import statement.","title":"Imports"},{"location":"edit-the-code/code-actions/#documentation","text":"The following quick fixes are available for documentation. Code action Description Document this Add the documentation to the closest node that can be documented clause. Update documentation Update the existing documentation when parameters are missing or not documented. This depends on the warning diagnostics issued by the compiler.","title":"Documentation"},{"location":"edit-the-code/code-actions/#incompatible-types","text":"The following quick fixes are available for incompatible types. Code action Description Change variable type Change the type of variable. Add type cast Add a type cast for the incompatible type. Change return type Change the incompatible return type of a function/method. Change parameter type Add a conditional default value for the incompatible type. Add conditional default value Ignore the return value of a function call or a method call with _ . Convert to 'xml'/'string' template Convert a raw template into a subtype ( xml or string ). Add type cast for numeric expressions Add a type cast for an unsupported numeric expression. The Change variable type , Change parameter type , Add type cast , and Change return type quick fixes are demonstrated below. The Add conditional default value and Convert to 'xml'/'string' template quick fixes are demonstrated below.","title":"Incompatible types"},{"location":"edit-the-code/code-actions/#functions","text":"The following quick fixes are available for creating functions. Code action Description Create function Create a function when there's an undefined function invoked by a function call expression. Implement method Implement an unimplemented method declared by an included object type. Implement all Implement all the methods declared by an included object type. Add explicit return statement Add an explicit return statement to a function. Convert to public function Add a public access modifier to a function definition. Add isolated qualifier Add an isolated qualifier to a function. The Create function , Implement method , and Implement all quick fixes are demonstrated below. The Add explicit return statement , Convert to public function , and Add isolated qualifier quick fixes are demonstrated below.","title":"Functions"},{"location":"edit-the-code/code-actions/#records","text":"The following quick fixes are available for records. Code action Description Create record Create a record for an unknown type clause. Fill record fields Add missing record fields to a mapping constructor expression.","title":"Records"},{"location":"edit-the-code/code-actions/#annotations","text":"The following quick fixes are available for annotations. Code action Description Convert to constant Convert an annotation declaration to a constant annotation declaration clause.","title":"Annotations"},{"location":"edit-the-code/code-actions/#other-quick-fixes","text":"Code action Description Convert to readonly clone Convert an e expression to e.cloneReadOnly() . Ignore unused variable Ignore an unused variable. Make construct pubic Make a construct public where the attempt to expose non-public symbol warning is present. Convert module variable to listener declaration Convert a module var declaration statement to a listener declaration. Remove unreachable code Remove unreachable statements. The Convert to readonly clone , Ignore unused variable , and Remove unreachable code quick fixes are demonstrated below. The Make construct public quick fix is demonstrated below. The Convert module variable to listener declaration quick fix is demonstrated below.","title":"Other quick fixes"},{"location":"edit-the-code/code-actions/#refactoring-actions","text":"Refactoring actions are suggested when the existing code can be rearranged or restructured to improve the quality and maintainability of your code while ensuring that the overall behavior of the code remains unaffected.","title":"Refactoring actions"},{"location":"edit-the-code/code-actions/#extract-to-code-actions","text":"The following refactoring actions are available for extracting expressions. Code action Description Extract to constant Extract a constant expression to a constant. Extract to function Extract an expression or a statement to a function. Extract to local variable Extract an expression to a local variable. Extract type Extract anonymous records to record types.","title":"Extract to code actions"},{"location":"edit-the-code/code-actions/#rewrite-code-actions","text":"The following refactoring actions are available as rewrite actions. Code action Description Map with a query expression When both the right-hand side (RHS) and left-hand side (LHS) types are array types, convert the RHS to a query expression. You can modify the query expression with additional clauses and mappings later.","title":"Rewrite code actions"},{"location":"edit-the-code/code-actions/#source-actions","text":"Source actions are used to generate common code structures and recurring elements.","title":"Source actions"},{"location":"edit-the-code/code-actions/#generate-getters-and-setters","text":"The following source actions are available for generating getters and setters. Code action Description Create a getter Generate a getter for class-level variables. Create a setter Generate a setter for class-level variables. Create getter and setter Generate both getter and setter for class-level variables.","title":"Generate getters and setters"},{"location":"edit-the-code/code-actions/#variables","text":"The following source actions are available for variables. Code action Description Type guard variable Type guard a variable if the variable type is a union type.","title":"Variables"},{"location":"edit-the-code/code-actions/#imports_1","text":"The following source actions are available for imports. Code action Description Optimize imports Optimize import statements to remove unused imports and arrange imports in alphabetical order.","title":"Imports"},{"location":"edit-the-code/code-actions/#documentation_1","text":"The following source actions are available for documentations. Code action Description Document all Document all the top-level constructs.","title":"Documentation"},{"location":"edit-the-code/code-navigation/","text":"Code navigation \u00b6 Ballerina VSCode extension provides rich support for code navigation . Different kinds of navigations supported are described in the following sections. Go to definition \u00b6 Go to definition navigates you to the definition of a particular symbol. For example, when you invoke the Go To Definition option on a function call expression, it navigates you to the definition of the function. Go to symbol \u00b6 Go to symbol feature allows you to navigate symbols inside a file. Find all references \u00b6 Invoking the references (Right click on a symbol and select Find All References ) on a symbol will prompt you with all the symbol references in the current project. Peek \u00b6 This feature allows you to peek the definition or references of a given symbol. Rename symbols \u00b6 This feature allows you to rename symbols by renaming all the references of the particular symbol.","title":"Code navigation"},{"location":"edit-the-code/code-navigation/#code-navigation","text":"Ballerina VSCode extension provides rich support for code navigation . Different kinds of navigations supported are described in the following sections.","title":"Code navigation"},{"location":"edit-the-code/code-navigation/#go-to-definition","text":"Go to definition navigates you to the definition of a particular symbol. For example, when you invoke the Go To Definition option on a function call expression, it navigates you to the definition of the function.","title":"Go to definition"},{"location":"edit-the-code/code-navigation/#go-to-symbol","text":"Go to symbol feature allows you to navigate symbols inside a file.","title":"Go to symbol"},{"location":"edit-the-code/code-navigation/#find-all-references","text":"Invoking the references (Right click on a symbol and select Find All References ) on a symbol will prompt you with all the symbol references in the current project.","title":"Find all references"},{"location":"edit-the-code/code-navigation/#peek","text":"This feature allows you to peek the definition or references of a given symbol.","title":"Peek"},{"location":"edit-the-code/code-navigation/#rename-symbols","text":"This feature allows you to rename symbols by renaming all the references of the particular symbol.","title":"Rename symbols"},{"location":"edit-the-code/commands/","text":"Commands \u00b6 You can use the commands below when editing Ballerina code via the VS Code extension. Click View in the menu bar of the editor, and then, click Command Palette to access them. Tip Alternatively, you can use the shortcut methods \u2318 + \u2191 + P on Mac and Ctrl + Shift + P on Windows and Linux. Command Description Show Examples Lists the available examples of the Ballerina language. You can explore each by clicking on each example. Build Provides quick access to build your Ballerina project. Once executed, the current Ballerina project relative to the currently-opened text editor is built using the bal build CLI command. Pack Provides quick access to pack your Ballerina library packages. Once executed, the current Ballerina project relative to the currently-opened text editor is packed using the bal pack CLI command. Run Runs your Ballerina project. Once executed, the opened Ballerina project is built using the bal run CLI command. Test Runs all the tests in your Ballerina project using the bal test CLI command. Build Documentation Provides a quick guide to generate documentation for your Ballerina project. Once executed, the documentation is generated using the bal doc CLI command. The generated documentation can be found inside the apidocs directory in the target project. Show Diagram Provides a palette reference to access the Diagrams . On execution, the diagram editor of the first diagram component listed under the Diagrams view is rendered. Add Module Adds a Ballerina module for the given module name using the bal add CLI command. Create 'Cloud.toml' Generates a Cloud.toml file for your Ballerina project according to the default cloud specifications . Paste JSON as Record Converts a JSON string (that is copied to the clipboard) to a Ballerina record(s) and pastes it in your code.","title":"Commands"},{"location":"edit-the-code/commands/#commands","text":"You can use the commands below when editing Ballerina code via the VS Code extension. Click View in the menu bar of the editor, and then, click Command Palette to access them. Tip Alternatively, you can use the shortcut methods \u2318 + \u2191 + P on Mac and Ctrl + Shift + P on Windows and Linux. Command Description Show Examples Lists the available examples of the Ballerina language. You can explore each by clicking on each example. Build Provides quick access to build your Ballerina project. Once executed, the current Ballerina project relative to the currently-opened text editor is built using the bal build CLI command. Pack Provides quick access to pack your Ballerina library packages. Once executed, the current Ballerina project relative to the currently-opened text editor is packed using the bal pack CLI command. Run Runs your Ballerina project. Once executed, the opened Ballerina project is built using the bal run CLI command. Test Runs all the tests in your Ballerina project using the bal test CLI command. Build Documentation Provides a quick guide to generate documentation for your Ballerina project. Once executed, the documentation is generated using the bal doc CLI command. The generated documentation can be found inside the apidocs directory in the target project. Show Diagram Provides a palette reference to access the Diagrams . On execution, the diagram editor of the first diagram component listed under the Diagrams view is rendered. Add Module Adds a Ballerina module for the given module name using the bal add CLI command. Create 'Cloud.toml' Generates a Cloud.toml file for your Ballerina project according to the default cloud specifications . Paste JSON as Record Converts a JSON string (that is copied to the clipboard) to a Ballerina record(s) and pastes it in your code.","title":"Commands"},{"location":"edit-the-code/diagnostics/","text":"Diagnostics \u00b6 Diagnostics are the syntax and semantic errors that are identified in the source code. These may include a variety of errors and warnings. View diagnostics \u00b6 Diagnostics will show up in multiple places: In the Status Bar, there is a summary of all errors and warnings counts. The summary view and the PROBLEMS panel lists all of the current errors. Errors or warnings in a Ballerina file will be rendered inline with the text and in the overview ruler. Perform quick fixes \u00b6 For certain diagnostics, the possible quick fixes are suggested as code actions. You can easily select and apply the required quick fix from the list. For example, the variable assignment is required diagnostic suggests two quick fixes as follows: - Create a new variable - Ignore the return value","title":"Diagnostics"},{"location":"edit-the-code/diagnostics/#diagnostics","text":"Diagnostics are the syntax and semantic errors that are identified in the source code. These may include a variety of errors and warnings.","title":"Diagnostics"},{"location":"edit-the-code/diagnostics/#view-diagnostics","text":"Diagnostics will show up in multiple places: In the Status Bar, there is a summary of all errors and warnings counts. The summary view and the PROBLEMS panel lists all of the current errors. Errors or warnings in a Ballerina file will be rendered inline with the text and in the overview ruler.","title":"View diagnostics"},{"location":"edit-the-code/diagnostics/#perform-quick-fixes","text":"For certain diagnostics, the possible quick fixes are suggested as code actions. You can easily select and apply the required quick fix from the list. For example, the variable assignment is required diagnostic suggests two quick fixes as follows: - Create a new variable - Ignore the return value","title":"Perform quick fixes"},{"location":"edit-the-code/intellisense/","text":"IntelliSense \u00b6 The sections below describe the IntelliSense features that can be used to edit Ballerina code via the VS Code extension. Code completion and snippets \u00b6 The extension provides suggestions on variables, keywords, and code snippets of language constructs (such as functions, type definitions, services, iterable constructs, etc.). Following are some key features of the code completion support provided by the extension. Context-aware completion items \u00b6 The completion items list is sorted based on the context of the current cursor position. Suggestions for service templates \u00b6 Service templates corresponding to each available listener are provided in the list of completion items. Completion support for iterables \u00b6 The foreach and foreach i completion items are provided for iterable variables. Completion support for type guarding a variable \u00b6 The typeguard completion item is provided for union-typed variables. Filling required fields of a record \u00b6 The Fill Record required fields completion item is provided for filling the remaining fields of a Record typed value. Help via hover \u00b6 When hovering over a symbol name, you will be provided with quick information about the particular symbol. For example, when hovering over a function name, you will be prompted with the associated documentation. Signature help \u00b6 When typing a function/method call expression, the signature help will show information such as the function/method call\u2019s description and parameter information. Signature help will be triggered when typing the open parenthesis and comma.","title":"IntelliSense"},{"location":"edit-the-code/intellisense/#intellisense","text":"The sections below describe the IntelliSense features that can be used to edit Ballerina code via the VS Code extension.","title":"IntelliSense"},{"location":"edit-the-code/intellisense/#code-completion-and-snippets","text":"The extension provides suggestions on variables, keywords, and code snippets of language constructs (such as functions, type definitions, services, iterable constructs, etc.). Following are some key features of the code completion support provided by the extension.","title":"Code completion and snippets"},{"location":"edit-the-code/intellisense/#context-aware-completion-items","text":"The completion items list is sorted based on the context of the current cursor position.","title":"Context-aware completion items"},{"location":"edit-the-code/intellisense/#suggestions-for-service-templates","text":"Service templates corresponding to each available listener are provided in the list of completion items.","title":"Suggestions for service templates"},{"location":"edit-the-code/intellisense/#completion-support-for-iterables","text":"The foreach and foreach i completion items are provided for iterable variables.","title":"Completion support for iterables"},{"location":"edit-the-code/intellisense/#completion-support-for-type-guarding-a-variable","text":"The typeguard completion item is provided for union-typed variables.","title":"Completion support for type guarding a variable"},{"location":"edit-the-code/intellisense/#filling-required-fields-of-a-record","text":"The Fill Record required fields completion item is provided for filling the remaining fields of a Record typed value.","title":"Filling required fields of a record"},{"location":"edit-the-code/intellisense/#help-via-hover","text":"When hovering over a symbol name, you will be provided with quick information about the particular symbol. For example, when hovering over a function name, you will be prompted with the associated documentation.","title":"Help via hover"},{"location":"edit-the-code/intellisense/#signature-help","text":"When typing a function/method call expression, the signature help will show information such as the function/method call\u2019s description and parameter information. Signature help will be triggered when typing the open parenthesis and comma.","title":"Signature help"},{"location":"get-started/build-the-executables/","text":"Build the executables \u00b6 Follow the steps below to create an executable JAR file to deploy. Click View in the menu bar of the editor, and click Command Palette . Tip You can use the shortcut methods \u2318 + \u2191 + P on macOS and Ctrl + Shift + P on Windows and Linux. In the search bar, type Build , and click Ballerina: Build . The integrated terminal will open automatically and run the build command. Info The JAR file can be found in the /target/bin/ directory.","title":"Build the executables"},{"location":"get-started/build-the-executables/#build-the-executables","text":"Follow the steps below to create an executable JAR file to deploy. Click View in the menu bar of the editor, and click Command Palette . Tip You can use the shortcut methods \u2318 + \u2191 + P on macOS and Ctrl + Shift + P on Windows and Linux. In the search bar, type Build , and click Ballerina: Build . The integrated terminal will open automatically and run the build command. Info The JAR file can be found in the /target/bin/ directory.","title":"Build the executables"},{"location":"get-started/install-the-extension/","text":"Install the extension \u00b6 The sections below walk you through how to get started with the Ballerina VS Code extension by installing it and opening a Ballerina package in it. Install the Ballerina extension \u00b6 Follow the steps below to set up the required prerequisites and install the Ballerina extension. Install the Visual Studio Code editor version 1.60.0 or later. Download and install Ballerina . Install the Ballerina VS Code Extension . Open a Ballerina ( .bal ) file or a Ballerina package to activate the extension. Open Ballerina packages \u00b6 You can work on a single Ballerina package at a time or use multi-root workspaces of VS Code to work on several related Ballerina packages at the same time. Info When the extension is activated properly, you can see the Ballerina SDK: <version> in the status bar at the bottom left corner. Open a single Ballerina package \u00b6 Use one of the following options to open a Ballerina package: From the command line, execute code <path-to-package-dir> . From VS Code, click File > Open Folder... . Open multiple Ballerina packages \u00b6 Once you have one Ballerina package opened in the VS Code editor, you can add other related packages to the same workspace. For more details, see the instructions on adding folders to multi-root workspaces in the VS Code editor.","title":"Install the extension"},{"location":"get-started/install-the-extension/#install-the-extension","text":"The sections below walk you through how to get started with the Ballerina VS Code extension by installing it and opening a Ballerina package in it.","title":"Install the extension"},{"location":"get-started/install-the-extension/#install-the-ballerina-extension","text":"Follow the steps below to set up the required prerequisites and install the Ballerina extension. Install the Visual Studio Code editor version 1.60.0 or later. Download and install Ballerina . Install the Ballerina VS Code Extension . Open a Ballerina ( .bal ) file or a Ballerina package to activate the extension.","title":"Install the Ballerina extension"},{"location":"get-started/install-the-extension/#open-ballerina-packages","text":"You can work on a single Ballerina package at a time or use multi-root workspaces of VS Code to work on several related Ballerina packages at the same time. Info When the extension is activated properly, you can see the Ballerina SDK: <version> in the status bar at the bottom left corner.","title":"Open Ballerina packages"},{"location":"get-started/install-the-extension/#open-a-single-ballerina-package","text":"Use one of the following options to open a Ballerina package: From the command line, execute code <path-to-package-dir> . From VS Code, click File > Open Folder... .","title":"Open a single Ballerina package"},{"location":"get-started/install-the-extension/#open-multiple-ballerina-packages","text":"Once you have one Ballerina package opened in the VS Code editor, you can add other related packages to the same workspace. For more details, see the instructions on adding folders to multi-root workspaces in the VS Code editor.","title":"Open multiple Ballerina packages"},{"location":"get-started/run-a-program/","text":"Run a program \u00b6 Follow the steps below to run a sample Ballerina program in VS Code. Use the code view \u00b6 Follow the steps below to use the code view to run a Ballerina program. Note Skip the steps 1-3, if you already have a Ballerina code. Click View in the menu bar of the editor, and click Command Palette . Tip You can use the shortcut methods \u2318 + \u2191 + P on macOS and Ctrl + Shift + P on Windows and Linux. In the search bar, type Show Examples , and click Ballerina: Show Examples . Select the Hello World Main example. Run the program. Option 1 Click on the Run CodeLens on the editor. Option 2 Click Run on the title bar of the editor. Use the diagram view \u00b6 Follow the steps below to use the code view to run a Ballerina program. View the diagram: Option 1 Click Show Diagram on the title bar of the editor to view the graphical representation of the program. Option 2 Click the Ballerina icon in the VS Code side menu to open the diagram explorer tree. Run the program: Option 1 Click Run in the diagram options menu. Option 2 Click Run on the title bar of the editor. The integrated terminal will open automatically and run the program. You just ran your first Ballerina program. Tip If you wish to debug further, use either Debug or see the debugging guidelines . Next steps - Try it \u00b6 The Ballerina VS Code extension allows you to try out and debug HTTP/GraphQL services (without using any third-party tools) while you develop them. Try HTTP services in Swagger view Try GraphQL services","title":"Run a program"},{"location":"get-started/run-a-program/#run-a-program","text":"Follow the steps below to run a sample Ballerina program in VS Code.","title":"Run a program"},{"location":"get-started/run-a-program/#use-the-code-view","text":"Follow the steps below to use the code view to run a Ballerina program. Note Skip the steps 1-3, if you already have a Ballerina code. Click View in the menu bar of the editor, and click Command Palette . Tip You can use the shortcut methods \u2318 + \u2191 + P on macOS and Ctrl + Shift + P on Windows and Linux. In the search bar, type Show Examples , and click Ballerina: Show Examples . Select the Hello World Main example. Run the program. Option 1 Click on the Run CodeLens on the editor. Option 2 Click Run on the title bar of the editor.","title":"Use the code view"},{"location":"get-started/run-a-program/#use-the-diagram-view","text":"Follow the steps below to use the code view to run a Ballerina program. View the diagram: Option 1 Click Show Diagram on the title bar of the editor to view the graphical representation of the program. Option 2 Click the Ballerina icon in the VS Code side menu to open the diagram explorer tree. Run the program: Option 1 Click Run in the diagram options menu. Option 2 Click Run on the title bar of the editor. The integrated terminal will open automatically and run the program. You just ran your first Ballerina program. Tip If you wish to debug further, use either Debug or see the debugging guidelines .","title":"Use the diagram view"},{"location":"get-started/run-a-program/#next-steps-try-it","text":"The Ballerina VS Code extension allows you to try out and debug HTTP/GraphQL services (without using any third-party tools) while you develop them. Try HTTP services in Swagger view Try GraphQL services","title":"Next steps - Try it"},{"location":"get-started/try-the-code/try-graphql-services/","text":"Try GraphQL services \u00b6 GraphQL is an open-source data querying and manipulation language for APIs. While you develop a GraphQL service, you need to try it and debug it to check how it works. The Ballerina VS Code extension provides the GraphQL Try it view, which gives the ability to try GraphQL services within VS Code instead of using any third-party software. Write the GraphQL service \u00b6 Add the code below to the main.bal file. import ballerina/graphql; # A service representing a network-accessible GraphQL API. service / on new graphql:Listener(8090) { # A resource for generating greetings. # + name - the input string name # + return - string name with greeting message or error resource function get greeting(string name) returns string|error { // Send a response back to the caller. if name is \"\" { return error(\"name should not be empty!\"); } return \"Hello, \" + name; } } Try the GraphQL service \u00b6 Once you add the above function, the VS Code extension will display a CodeLens called Try it on top of the service. Click the Run CodeLens to run the program. Info This opens the terminal and starts running the service. Click the Try it CodeLens to open the GraphQL Try it view. Note The service must be in the running state to use GraphQL Try it view. Once the GraphQL view is opened, click Explorer to open the Explorer view. Tip You can find the available APIs from the side menu that opens. Select the APIs that you want to try from the Explorer menu. Info This will automatically generate the payload in the editor. You can edit the payload and add the required parameters (e.g., type your name under the name parameter). Prettify will format the code for you. Click Run to send the request. The response is displayed in the right-side window.","title":"Try GraphQL services"},{"location":"get-started/try-the-code/try-graphql-services/#try-graphql-services","text":"GraphQL is an open-source data querying and manipulation language for APIs. While you develop a GraphQL service, you need to try it and debug it to check how it works. The Ballerina VS Code extension provides the GraphQL Try it view, which gives the ability to try GraphQL services within VS Code instead of using any third-party software.","title":"Try GraphQL services"},{"location":"get-started/try-the-code/try-graphql-services/#write-the-graphql-service","text":"Add the code below to the main.bal file. import ballerina/graphql; # A service representing a network-accessible GraphQL API. service / on new graphql:Listener(8090) { # A resource for generating greetings. # + name - the input string name # + return - string name with greeting message or error resource function get greeting(string name) returns string|error { // Send a response back to the caller. if name is \"\" { return error(\"name should not be empty!\"); } return \"Hello, \" + name; } }","title":"Write the GraphQL service"},{"location":"get-started/try-the-code/try-graphql-services/#try-the-graphql-service","text":"Once you add the above function, the VS Code extension will display a CodeLens called Try it on top of the service. Click the Run CodeLens to run the program. Info This opens the terminal and starts running the service. Click the Try it CodeLens to open the GraphQL Try it view. Note The service must be in the running state to use GraphQL Try it view. Once the GraphQL view is opened, click Explorer to open the Explorer view. Tip You can find the available APIs from the side menu that opens. Select the APIs that you want to try from the Explorer menu. Info This will automatically generate the payload in the editor. You can edit the payload and add the required parameters (e.g., type your name under the name parameter). Prettify will format the code for you. Click Run to send the request. The response is displayed in the right-side window.","title":"Try the GraphQL service"},{"location":"get-started/try-the-code/try-http-services/","text":"Try HTTP services in Swagger view \u00b6 While you develop an HTTP service, you need to try it and debug it to check how it works. The Ballerina VS Code extension provides the Swagger Try it view, which gives the ability to try HTTP services within VS Code instead of using any third-party software. Write the HTTP service \u00b6 Add the code below to the main.bal file. import ballerina/http; service / on new http:Listener(9090) { // This function responds with the `string` value `Hello, World!` to HTTP GET requests. resource function get greeting(string name) returns string { return \"Hello, World!\"; } } Try the HTTP service \u00b6 Once you add the above function, the VS Code extension will display a CodeLens called Try it on top of the service. Click the Run CodeLens to run the program. Info This opens the terminal and starts running the service. Click the Try it CodeLens to open the Swagger Try it view. Note The service must be in the running state to use Try it view. Once the Swagger view is opened, click Try it out . Tip You can find all available APIs from the opened side menu. Info If the HTTP service requires any data/parameters, they will be shown in the Parameters section. If you have the Choreo VS Code extension installed and signed in, you will get test data that are generated automatically (e.g., the value of the name parameter will be generated as shown below.) Click Execute to see the response. You view the reponse as shown below.","title":"Try HTTP services"},{"location":"get-started/try-the-code/try-http-services/#try-http-services-in-swagger-view","text":"While you develop an HTTP service, you need to try it and debug it to check how it works. The Ballerina VS Code extension provides the Swagger Try it view, which gives the ability to try HTTP services within VS Code instead of using any third-party software.","title":"Try HTTP services in Swagger view"},{"location":"get-started/try-the-code/try-http-services/#write-the-http-service","text":"Add the code below to the main.bal file. import ballerina/http; service / on new http:Listener(9090) { // This function responds with the `string` value `Hello, World!` to HTTP GET requests. resource function get greeting(string name) returns string { return \"Hello, World!\"; } }","title":"Write the HTTP service"},{"location":"get-started/try-the-code/try-http-services/#try-the-http-service","text":"Once you add the above function, the VS Code extension will display a CodeLens called Try it on top of the service. Click the Run CodeLens to run the program. Info This opens the terminal and starts running the service. Click the Try it CodeLens to open the Swagger Try it view. Note The service must be in the running state to use Try it view. Once the Swagger view is opened, click Try it out . Tip You can find all available APIs from the opened side menu. Info If the HTTP service requires any data/parameters, they will be shown in the Parameters section. If you have the Choreo VS Code extension installed and signed in, you will get test data that are generated automatically (e.g., the value of the name parameter will be generated as shown below.) Click Execute to see the response. You view the reponse as shown below.","title":"Try the HTTP service"},{"location":"references/convert-json-to-records/","text":"Convert JSON to records \u00b6 The Ballerina language provides several options to convert JSON files into record definitions. Via the Record Editor \u00b6 Follow the steps below to convert a JSON to record via the Record Editor. Create a file with the data below in JSON format. Info The example below converts a person and a list of courses to a Student record. { \"person\": { \"id\": 1001, \"firstName\": \"Vinnie\", \"lastName\": \"Hickman\", \"age\": 15 }, \"course\": [ { \"id\": \"CS6002\", \"name\": \"Computation Structures\", \"credits\": 4 }, { \"id\": \"CS6003\", \"name\": \"Circuits and Electronics\", \"credits\": 3 }, { \"id\": \"CS6004\", \"name\": \"Signals and Systems\", \"credits\": 3 } ] } In the Record Editor, select Import A JSON . Provide a name for the record. Provide the sample JSON by either typing/pasting on the text area or by choosing the JSON file from the file selector. Select Make Separate Record Definitions to create separate Ballerina record definitions. Use the preview of the created record to edit the created records further, and click Finish once editing is complete. Via the Command Palette \u00b6 Follow the steps below to convert a JSON to record via the Command Palette. Copy the JSON code block to the Clipboard ( Ctrl + C ). Info The example below converts a person and a list of courses to a Student record. { \"person\": { \"id\": 1001, \"firstName\": \"Vinnie\", \"lastName\": \"Hickman\", \"age\": 15 }, \"course\": [ { \"id\": \"CS6002\", \"name\": \"Computation Structures\", \"credits\": 4 }, { \"id\": \"CS6003\", \"name\": \"Circuits and Electronics\", \"credits\": 3 }, { \"id\": \"CS6004\", \"name\": \"Signals and Systems\", \"credits\": 3 } ] } Open the Command Palette in the VS Code editor (shortcut: Ctrl + Shift + P ). Select the Paste JSON as Record option. Info The command will generate separate record definitions accordingly.","title":"Convert JSON to records"},{"location":"references/convert-json-to-records/#convert-json-to-records","text":"The Ballerina language provides several options to convert JSON files into record definitions.","title":"Convert JSON to records"},{"location":"references/convert-json-to-records/#via-the-record-editor","text":"Follow the steps below to convert a JSON to record via the Record Editor. Create a file with the data below in JSON format. Info The example below converts a person and a list of courses to a Student record. { \"person\": { \"id\": 1001, \"firstName\": \"Vinnie\", \"lastName\": \"Hickman\", \"age\": 15 }, \"course\": [ { \"id\": \"CS6002\", \"name\": \"Computation Structures\", \"credits\": 4 }, { \"id\": \"CS6003\", \"name\": \"Circuits and Electronics\", \"credits\": 3 }, { \"id\": \"CS6004\", \"name\": \"Signals and Systems\", \"credits\": 3 } ] } In the Record Editor, select Import A JSON . Provide a name for the record. Provide the sample JSON by either typing/pasting on the text area or by choosing the JSON file from the file selector. Select Make Separate Record Definitions to create separate Ballerina record definitions. Use the preview of the created record to edit the created records further, and click Finish once editing is complete.","title":"Via the Record Editor"},{"location":"references/convert-json-to-records/#via-the-command-palette","text":"Follow the steps below to convert a JSON to record via the Command Palette. Copy the JSON code block to the Clipboard ( Ctrl + C ). Info The example below converts a person and a list of courses to a Student record. { \"person\": { \"id\": 1001, \"firstName\": \"Vinnie\", \"lastName\": \"Hickman\", \"age\": 15 }, \"course\": [ { \"id\": \"CS6002\", \"name\": \"Computation Structures\", \"credits\": 4 }, { \"id\": \"CS6003\", \"name\": \"Circuits and Electronics\", \"credits\": 3 }, { \"id\": \"CS6004\", \"name\": \"Signals and Systems\", \"credits\": 3 } ] } Open the Command Palette in the VS Code editor (shortcut: Ctrl + Shift + P ). Select the Paste JSON as Record option. Info The command will generate separate record definitions accordingly.","title":"Via the Command Palette"},{"location":"references/record-editor/","text":"Record Editor \u00b6 Record is the type system introduced by the Ballerina language to hold data by a user. You can use records when you want to define data schemas. Once the records are created, you can easily manipulate data inside a program. Ballerina is a multi-paradigm language. You can define records in an imperative manner with Ballerina. On top of that, the Ballerina VS Code plugin comes with record editing capabilities, which will help you to edit records graphically. In the record editor, you have the ability to create a record from scratch or create a record by importing a JSON. Set up the prerequisites \u00b6 Follow the steps below to set up the prerequisites. Install the latest versions of Ballerina and Ballerina Visual Studio Code plugin . Execute the command below to create a package (if you are not already working on one). bal new convert Open the created package in VS Code. Create records from scratch \u00b6 Follow the steps below to create records from scratch. Navigate to the record editor and select Create New . Double-click the default record name to change it. Click the plus button at the end of the field to add new fields to the record. Info Use the Expressions tab in the record editor to create nested records by selecting the particular record expression. Select the semicolon(;) of a field and select the default value expression to add default values. Use the isClosed option to switch between the open and closed records. Once the record field configuration is done, click Save .","title":"Record Editor"},{"location":"references/record-editor/#record-editor","text":"Record is the type system introduced by the Ballerina language to hold data by a user. You can use records when you want to define data schemas. Once the records are created, you can easily manipulate data inside a program. Ballerina is a multi-paradigm language. You can define records in an imperative manner with Ballerina. On top of that, the Ballerina VS Code plugin comes with record editing capabilities, which will help you to edit records graphically. In the record editor, you have the ability to create a record from scratch or create a record by importing a JSON.","title":"Record Editor"},{"location":"references/record-editor/#set-up-the-prerequisites","text":"Follow the steps below to set up the prerequisites. Install the latest versions of Ballerina and Ballerina Visual Studio Code plugin . Execute the command below to create a package (if you are not already working on one). bal new convert Open the created package in VS Code.","title":"Set up the prerequisites"},{"location":"references/record-editor/#create-records-from-scratch","text":"Follow the steps below to create records from scratch. Navigate to the record editor and select Create New . Double-click the default record name to change it. Click the plus button at the end of the field to add new fields to the record. Info Use the Expressions tab in the record editor to create nested records by selecting the particular record expression. Select the semicolon(;) of a field and select the default value expression to add default values. Use the isClosed option to switch between the open and closed records. Once the record field configuration is done, click Save .","title":"Create records from scratch"},{"location":"references/statement-editor/call-a-ballerina-library-function/","text":"Call a Ballerina library function \u00b6 The Statement Editor allows you to easily navigate between Ballerina standard libraries and language libraries. The libraries tab in Statement Editor lists all the supported standard and language libraries. This guide helps you to understand how to call a Ballerina library function using the Statement Editor. Let's call the Ballerina printError function of the log module to log an error in the given sample code below. public function main() returns error? { error e = error(\"something went wrong!\"); // Add the function call to log and error } Follow the steps below to build the log statement. On the low-code diagram, click + within the main method. Then, click Function in the Add Constructs opened panel. The Libraries tab will be selected by default listing all the supported Ballerina libraries. Search for log and select the log module. This will list all the supported functions, errors, records, types, etc. of the log module. Select the log:printError function. When you select a function or a method call, the Parameters tab opens by default. This tab displays information about the selected function or method call including details about the parameters, descriptions, and return type descriptions. On this tab, you can easily add parameters to the expression by selecting the checkboxes of the relevant parameters. Double-click on the <add-mgs> template and type \"error log\". Now, follow the steps below to pass the error - e to the printError function. Select the checkbox of the error from the parameter list. This will update the function with the correct syntax to add the error. Go to the Suggestions tab and select e , which is the previously defined error. You view the function call as follows without any diagnostics: log:printError(\"error log\", 'error = e); Now, you have constructed a valid function-call via the Statement Editor. Click Save to add the function call to the low-code diagram.","title":"Call a Ballerina library function"},{"location":"references/statement-editor/call-a-ballerina-library-function/#call-a-ballerina-library-function","text":"The Statement Editor allows you to easily navigate between Ballerina standard libraries and language libraries. The libraries tab in Statement Editor lists all the supported standard and language libraries. This guide helps you to understand how to call a Ballerina library function using the Statement Editor. Let's call the Ballerina printError function of the log module to log an error in the given sample code below. public function main() returns error? { error e = error(\"something went wrong!\"); // Add the function call to log and error } Follow the steps below to build the log statement. On the low-code diagram, click + within the main method. Then, click Function in the Add Constructs opened panel. The Libraries tab will be selected by default listing all the supported Ballerina libraries. Search for log and select the log module. This will list all the supported functions, errors, records, types, etc. of the log module. Select the log:printError function. When you select a function or a method call, the Parameters tab opens by default. This tab displays information about the selected function or method call including details about the parameters, descriptions, and return type descriptions. On this tab, you can easily add parameters to the expression by selecting the checkboxes of the relevant parameters. Double-click on the <add-mgs> template and type \"error log\". Now, follow the steps below to pass the error - e to the printError function. Select the checkbox of the error from the parameter list. This will update the function with the correct syntax to add the error. Go to the Suggestions tab and select e , which is the previously defined error. You view the function call as follows without any diagnostics: log:printError(\"error log\", 'error = e); Now, you have constructed a valid function-call via the Statement Editor. Click Save to add the function call to the low-code diagram.","title":"Call a Ballerina library function"},{"location":"references/statement-editor/construct-a-record/","text":"Construct a record using the Statement Editor \u00b6 Follow the steps below to construct a record using the Statement Editor. Navigate to the Record Editor and select Create New . Double-click the default record name to change it. To add another field to the record, click the plus button, which appears when you hover over the current field. To convert the record field to a default-valued field, click the semicolon(;) . This selects the complete record field and selects the Expressions tab. Click the Es=Ex template. The selected field gets updated with the <add-expression> template. You can double-click and update it. Follow the two approaches below to mark a record field as Optional . First, select the variable name of the field that is needed to mark as optional and then, select the ? from the toolbar select the Es? template from the Expressions tab To convert the record to an open/closed record, first, select the complete record by clicking on the record keyword. This selects the Expressions tab in which you are given the option to make a record a closed record. Once the record field configuration is done, click Save .","title":"Construct a record"},{"location":"references/statement-editor/construct-a-record/#construct-a-record-using-the-statement-editor","text":"Follow the steps below to construct a record using the Statement Editor. Navigate to the Record Editor and select Create New . Double-click the default record name to change it. To add another field to the record, click the plus button, which appears when you hover over the current field. To convert the record field to a default-valued field, click the semicolon(;) . This selects the complete record field and selects the Expressions tab. Click the Es=Ex template. The selected field gets updated with the <add-expression> template. You can double-click and update it. Follow the two approaches below to mark a record field as Optional . First, select the variable name of the field that is needed to mark as optional and then, select the ? from the toolbar select the Es? template from the Expressions tab To convert the record to an open/closed record, first, select the complete record by clicking on the record keyword. This selects the Expressions tab in which you are given the option to make a record a closed record. Once the record field configuration is done, click Save .","title":"Construct a record using the Statement Editor"},{"location":"references/statement-editor/define-a-configurable-variable/","text":"Define a configurable variable using the Statement Editor \u00b6 As you develop your construct, you may identify a parameter for which the value needs to be configurable and for which you have not already defined the required configurable. Then, you can access the configurable variable template while defining/editing the current statement. Follow the steps below if you are adding a variable and you want to make its value configurable. For example, when you create a variable host of type string , if you decide the value of this variable should be configurable, Click on the <add-expression> template and click the Add-configurable button in the toolbar. This opens up a new pane with the configurable variable statement template. Update the variable name and value as required. Click the Add button. This adds the configurable variable to the source code and updates the current statement as shown below. A new configurable variable gets generated in the source code as shown below. configurable string dbHost = \"localhost\";","title":"Define a configurable variable"},{"location":"references/statement-editor/define-a-configurable-variable/#define-a-configurable-variable-using-the-statement-editor","text":"As you develop your construct, you may identify a parameter for which the value needs to be configurable and for which you have not already defined the required configurable. Then, you can access the configurable variable template while defining/editing the current statement. Follow the steps below if you are adding a variable and you want to make its value configurable. For example, when you create a variable host of type string , if you decide the value of this variable should be configurable, Click on the <add-expression> template and click the Add-configurable button in the toolbar. This opens up a new pane with the configurable variable statement template. Update the variable name and value as required. Click the Add button. This adds the configurable variable to the source code and updates the current statement as shown below. A new configurable variable gets generated in the source code as shown below. configurable string dbHost = \"localhost\";","title":"Define a configurable variable using the Statement Editor"},{"location":"references/statement-editor/statement-editor-overview/","text":"Statement Editor overview \u00b6 The Statement Editor allows you to construct Ballerina statements depending on the use case you want to build. It is an intuitive visual editor that is easy to use without an in-depth knowledge of the Ballerina Programming Language . It provides the following: Context-based suggestions Ballerina libraries (standard libraries and language libraries) Pre-defined expression templates Documentation for functions and methods to configure parameters easily Construct statements \u00b6 This guide walks you through the steps to build the following statement using the editing capabilities of the Statement Editor. Later, you will explore different use cases. final string userIdMsg = \"UserID : \" + id.toString(); Let's add the above statement to the main method of the given sample code below. int id = 1234; public function main() returns error? { // Statement will be added here } Follow the steps below to build the statement. On the low-code diagram, click + within the main method. Then, click Variable in the Add Constructs pane that opens. The Statement Editor opens displaying the syntax of a variable statement with the <add-expression> selected by default.v Click the var type descriptor on the statement and click string on the Suggestions tab. Info The Suggestions tab provides contextual suggestions based on the selected item. The Suggestions tab currently lists type suggestions because you selected the type descriptor. Here, you are specifying that the variable value is a string. To edit the variable name, double-click variable and type userIdMsg in the text box. Info Another way to make a part of a statement editable is to click on the required statement component and press Enter / Return . If you want to make changes to the content you have added to the statement, you can undo and redo your actions via the relevant icons on the top left of the toolbar. You can also remove content via the icon for deleting. Double click <add-expression> and type \"UserID : \" in the text box. Info To navigate from one item on the statement to another, you can also press Tab or Shift + Tab . Here, you are entering static text as a part of the variable value. Follow the two approaches below to concatenate another expression to the String that you added right now. Click the Plus (+) operator in the toolbar Click the Expressions tab, and under the Arithmetic section, click the Es + Ex expression. Both of these methods will append another expression template to the existing expression. Info The Expressions tab lists all the pre-defined templates that you can use to define complex expressions. In the Es + Ex expression template, Es refers to the existing expression you clicked and selected. + Ex combines another expression with Es . Click the Suggestions tab and click on the id suggestion. You view see some diagnostics generated for the suggestion you selected. Move on to the next step to resolve them. Follow the two approaches below to solve the diagnostics. Select the**code-actions** provided by the Statement Editor provides based on your preference. To view the options, click on the bulb icon next to the diagnostic. Click the Suggestions tab and click toString() in the suggestions list to convert the value to a string format. The Suggestions tab will also provide other supported functions that can be called for the given expression. Info When you select a function or a method call, the Parameters tab opens by default. This tab displays information about the selected function or method call, including details about parameters, descriptions, and return type descriptions. On this tab, you can easily add parameters to the expression by selecting the checkboxes of the relevant parameters. Note The Statement Editor clears all the diagnostics messages indicating that the statement is valid. Now, follow the steps below to make the variable a final. Click on the globe icon in the toolbar and select the final keyword. Info The dropdown shows the possible modifiers for the statement that is currently being edited. You view the variable statement as follows. final string userIdMsg = \"UserID : \" + id.toString(); Now, you constructed a valid statement via the Statement Editor. Click Save to add the variable statement to the low-code diagram. Featured use cases \u00b6 To explore more on the Statement Editor functionalities, see the use cases below. Call a Ballerina library function Construct a record Define a configurable variable","title":"Statement Editor overview"},{"location":"references/statement-editor/statement-editor-overview/#statement-editor-overview","text":"The Statement Editor allows you to construct Ballerina statements depending on the use case you want to build. It is an intuitive visual editor that is easy to use without an in-depth knowledge of the Ballerina Programming Language . It provides the following: Context-based suggestions Ballerina libraries (standard libraries and language libraries) Pre-defined expression templates Documentation for functions and methods to configure parameters easily","title":"Statement Editor overview"},{"location":"references/statement-editor/statement-editor-overview/#construct-statements","text":"This guide walks you through the steps to build the following statement using the editing capabilities of the Statement Editor. Later, you will explore different use cases. final string userIdMsg = \"UserID : \" + id.toString(); Let's add the above statement to the main method of the given sample code below. int id = 1234; public function main() returns error? { // Statement will be added here } Follow the steps below to build the statement. On the low-code diagram, click + within the main method. Then, click Variable in the Add Constructs pane that opens. The Statement Editor opens displaying the syntax of a variable statement with the <add-expression> selected by default.v Click the var type descriptor on the statement and click string on the Suggestions tab. Info The Suggestions tab provides contextual suggestions based on the selected item. The Suggestions tab currently lists type suggestions because you selected the type descriptor. Here, you are specifying that the variable value is a string. To edit the variable name, double-click variable and type userIdMsg in the text box. Info Another way to make a part of a statement editable is to click on the required statement component and press Enter / Return . If you want to make changes to the content you have added to the statement, you can undo and redo your actions via the relevant icons on the top left of the toolbar. You can also remove content via the icon for deleting. Double click <add-expression> and type \"UserID : \" in the text box. Info To navigate from one item on the statement to another, you can also press Tab or Shift + Tab . Here, you are entering static text as a part of the variable value. Follow the two approaches below to concatenate another expression to the String that you added right now. Click the Plus (+) operator in the toolbar Click the Expressions tab, and under the Arithmetic section, click the Es + Ex expression. Both of these methods will append another expression template to the existing expression. Info The Expressions tab lists all the pre-defined templates that you can use to define complex expressions. In the Es + Ex expression template, Es refers to the existing expression you clicked and selected. + Ex combines another expression with Es . Click the Suggestions tab and click on the id suggestion. You view see some diagnostics generated for the suggestion you selected. Move on to the next step to resolve them. Follow the two approaches below to solve the diagnostics. Select the**code-actions** provided by the Statement Editor provides based on your preference. To view the options, click on the bulb icon next to the diagnostic. Click the Suggestions tab and click toString() in the suggestions list to convert the value to a string format. The Suggestions tab will also provide other supported functions that can be called for the given expression. Info When you select a function or a method call, the Parameters tab opens by default. This tab displays information about the selected function or method call, including details about parameters, descriptions, and return type descriptions. On this tab, you can easily add parameters to the expression by selecting the checkboxes of the relevant parameters. Note The Statement Editor clears all the diagnostics messages indicating that the statement is valid. Now, follow the steps below to make the variable a final. Click on the globe icon in the toolbar and select the final keyword. Info The dropdown shows the possible modifiers for the statement that is currently being edited. You view the variable statement as follows. final string userIdMsg = \"UserID : \" + id.toString(); Now, you constructed a valid statement via the Statement Editor. Click Save to add the variable statement to the low-code diagram.","title":"Construct statements"},{"location":"references/statement-editor/statement-editor-overview/#featured-use-cases","text":"To explore more on the Statement Editor functionalities, see the use cases below. Call a Ballerina library function Construct a record Define a configurable variable","title":"Featured use cases"},{"location":"release-notes/version-3.3.0/","text":"Ballerina VS Code extension version 3.3.0 \u00b6 We are happy to announce the Ballerina VS Code extension 3.3.0 release, which has some exciting new features. Following are the highlights of this release. Visual Data Mapper - Helps you write and visualize data transformations easily. GraphQL Tryit - Facilitates trying out the GraphQL services with the integrated client. Record Editor - Provides a better editing experience with suggestions. Project Design View - Facilitates visualizing service interactions in your project. If you are new to Ballerina, you can download the installers to install it. You can install the Ballerina VS Code extension from the VS Code marketplace . Visual Data Mapper \u00b6 A powerful graphical editor, which allows you to easily create complex data transformations in a few minutes. Provides descriptive diagnostics, error highlighting, and code actions, which leverage the editing experience. An integrated expression editor to add custom values with the support of lang server suggestions, library browsing, etc. Currently, supports JSON to JSON transformations and will support more in the future. GraphQL Tryit \u00b6 You can try out the GraphQL services using the Tryit CodeLens. You can send and test any request with headers to your GraphQL service in VS Code itself without using any third-party tools. The GraphQL explorer will help you to explore the available endpoints and generate the query for you. Record Editor \u00b6 The expression editor is now combined with the record editor, which will give a better editing experience with suggestions and library support. Now, you can create records by importing a JSON file. All you need to do is select a sample JSON file under the Import a JSON ` section in the record creation. Record creation using JSON samples now supports separate record creation for complex JSON records. Project Design View (experimental) \u00b6 This release includes an experimental feature that allows you to visualize service interactions in your project. It also comes with a view to see record-type compositions and relationships. Use the Ballerina: Project Design command to open the design view.","title":"Version 3.3.0"},{"location":"release-notes/version-3.3.0/#ballerina-vs-code-extension-version-330","text":"We are happy to announce the Ballerina VS Code extension 3.3.0 release, which has some exciting new features. Following are the highlights of this release. Visual Data Mapper - Helps you write and visualize data transformations easily. GraphQL Tryit - Facilitates trying out the GraphQL services with the integrated client. Record Editor - Provides a better editing experience with suggestions. Project Design View - Facilitates visualizing service interactions in your project. If you are new to Ballerina, you can download the installers to install it. You can install the Ballerina VS Code extension from the VS Code marketplace .","title":"Ballerina VS Code extension version 3.3.0"},{"location":"release-notes/version-3.3.0/#visual-data-mapper","text":"A powerful graphical editor, which allows you to easily create complex data transformations in a few minutes. Provides descriptive diagnostics, error highlighting, and code actions, which leverage the editing experience. An integrated expression editor to add custom values with the support of lang server suggestions, library browsing, etc. Currently, supports JSON to JSON transformations and will support more in the future.","title":"Visual Data Mapper"},{"location":"release-notes/version-3.3.0/#graphql-tryit","text":"You can try out the GraphQL services using the Tryit CodeLens. You can send and test any request with headers to your GraphQL service in VS Code itself without using any third-party tools. The GraphQL explorer will help you to explore the available endpoints and generate the query for you.","title":"GraphQL Tryit"},{"location":"release-notes/version-3.3.0/#record-editor","text":"The expression editor is now combined with the record editor, which will give a better editing experience with suggestions and library support. Now, you can create records by importing a JSON file. All you need to do is select a sample JSON file under the Import a JSON ` section in the record creation. Record creation using JSON samples now supports separate record creation for complex JSON records.","title":"Record Editor"},{"location":"release-notes/version-3.3.0/#project-design-view-experimental","text":"This release includes an experimental feature that allows you to visualize service interactions in your project. It also comes with a view to see record-type compositions and relationships. Use the Ballerina: Project Design command to open the design view.","title":"Project Design View (experimental)"},{"location":"release-notes/version-4.0.0/","text":"Ballerina VS Code extension version 4.0.0 \u00b6 We are delighted to announce the v4.0.0 release of the Ballerina VS Code extension with new features and enhancements. The key highlights of this release include the following. Compatibility If you are new to Ballerina, you can download the installers to install it. You can install the Ballerina VS Code extension from the VS Code marketplace . To ensure all features work correctly, install the latest patch release of Update 4 or later . New unified visual and code editing experience HTTP API Designer GraphQL API Designer Architecture View Type Diagram Data Mapper improvements Language Server updates Choreo extension integration New unified visual and code editing experience \u00b6 In response to the valuable feedback received from developers, this release introduces a new unified development experience that seamlessly integrates code and visual development. This allows you to easily switch between code and visual development and leverage the benefits of both modes. With the new release, you can now find a Visualize CodeLens above each construct to visualize it. Clicking it will open the visualization of the construct. Currently, the visualization of all types of functions in Ballerina sequence diagrams and HTTP and GraphQL service types is supported. You can navigate back to the code using the menu or by pressing Ctrl + Click on the corresponding elements. HTTP API Designer \u00b6 The extension now offers an HTTP Service Designer, which enables you to design HTTP services interactively. This feature allows you to design services rapidly even if you lack extensive knowledge of Ballerina's HTTP service syntax. To open the service designer, add an HTTP service using code or the Add button in the visual editor, and then click the Visualize CodeLens above the HTTP service. GraphQL Designer \u00b6 The GraphQL Designer is introduced to streamline the visual creation of GraphQL APIs in Ballerina. This powerful tool simplifies understanding and navigating complex GraphQL services by letting you browse through them effortlessly without examining code directly. To open the GraphQL designer, add a GraphQL service from code using the service template and then, click the Visualize CodeLens above the service. Architecture View \u00b6 The extension now includes a feature to visualize interactions and dependencies of multi-package Ballerina projects. Load all the packages into the VS Code workspace and execute the Architecture View command to access it. The architecture diagram lets you view all the services in the packages and their interactions. Type Diagram \u00b6 Similar to entity diagrams, type diagrams enable you to view relationships and compositions of Ballerina record types. You can access the type diagram via the Architecture View . Data Mapper improvements \u00b6 The search functionality is now available for filtering input and output fields. Additionally, now, you can easily navigate through transformation functions used within the transformation and perform mappings on-the-spot. Language Server updates \u00b6 The language client version has been updated to 8.0.2. This adds support for the Language Server Protocol (LSP) version 3.17. The update also introduces support for selecting target expressions when applying the Extract code actions inside nested expressions. Choreo extension integration \u00b6 The combination of the Ballerina extension together with the Choreo extension offers additional features to help you develop and deploy cloud-native applications. You can try out the features below that are provided by the integration by installing the Choreo extension. Scaffold and deploy cloud-native applications quickly using the Architecture Diagram. Clone and open Choreo projects locally and monitor component statuses. Visualize the deployment of a Choreo project via the Cell view . View performance information in diagrams. Note With this integration, now, you do not need to log into Choreo from the Ballerina extension. You must have the Choreo extension installed to view performance data.","title":"Version 4.0.0"},{"location":"release-notes/version-4.0.0/#ballerina-vs-code-extension-version-400","text":"We are delighted to announce the v4.0.0 release of the Ballerina VS Code extension with new features and enhancements. The key highlights of this release include the following. Compatibility If you are new to Ballerina, you can download the installers to install it. You can install the Ballerina VS Code extension from the VS Code marketplace . To ensure all features work correctly, install the latest patch release of Update 4 or later . New unified visual and code editing experience HTTP API Designer GraphQL API Designer Architecture View Type Diagram Data Mapper improvements Language Server updates Choreo extension integration","title":"Ballerina VS Code extension version 4.0.0"},{"location":"release-notes/version-4.0.0/#new-unified-visual-and-code-editing-experience","text":"In response to the valuable feedback received from developers, this release introduces a new unified development experience that seamlessly integrates code and visual development. This allows you to easily switch between code and visual development and leverage the benefits of both modes. With the new release, you can now find a Visualize CodeLens above each construct to visualize it. Clicking it will open the visualization of the construct. Currently, the visualization of all types of functions in Ballerina sequence diagrams and HTTP and GraphQL service types is supported. You can navigate back to the code using the menu or by pressing Ctrl + Click on the corresponding elements.","title":"New unified visual and code editing experience"},{"location":"release-notes/version-4.0.0/#http-api-designer","text":"The extension now offers an HTTP Service Designer, which enables you to design HTTP services interactively. This feature allows you to design services rapidly even if you lack extensive knowledge of Ballerina's HTTP service syntax. To open the service designer, add an HTTP service using code or the Add button in the visual editor, and then click the Visualize CodeLens above the HTTP service.","title":"HTTP API Designer"},{"location":"release-notes/version-4.0.0/#graphql-designer","text":"The GraphQL Designer is introduced to streamline the visual creation of GraphQL APIs in Ballerina. This powerful tool simplifies understanding and navigating complex GraphQL services by letting you browse through them effortlessly without examining code directly. To open the GraphQL designer, add a GraphQL service from code using the service template and then, click the Visualize CodeLens above the service.","title":"GraphQL Designer"},{"location":"release-notes/version-4.0.0/#architecture-view","text":"The extension now includes a feature to visualize interactions and dependencies of multi-package Ballerina projects. Load all the packages into the VS Code workspace and execute the Architecture View command to access it. The architecture diagram lets you view all the services in the packages and their interactions.","title":"Architecture View"},{"location":"release-notes/version-4.0.0/#type-diagram","text":"Similar to entity diagrams, type diagrams enable you to view relationships and compositions of Ballerina record types. You can access the type diagram via the Architecture View .","title":"Type Diagram"},{"location":"release-notes/version-4.0.0/#data-mapper-improvements","text":"The search functionality is now available for filtering input and output fields. Additionally, now, you can easily navigate through transformation functions used within the transformation and perform mappings on-the-spot.","title":"Data Mapper improvements"},{"location":"release-notes/version-4.0.0/#language-server-updates","text":"The language client version has been updated to 8.0.2. This adds support for the Language Server Protocol (LSP) version 3.17. The update also introduces support for selecting target expressions when applying the Extract code actions inside nested expressions.","title":"Language Server updates"},{"location":"release-notes/version-4.0.0/#choreo-extension-integration","text":"The combination of the Ballerina extension together with the Choreo extension offers additional features to help you develop and deploy cloud-native applications. You can try out the features below that are provided by the integration by installing the Choreo extension. Scaffold and deploy cloud-native applications quickly using the Architecture Diagram. Clone and open Choreo projects locally and monitor component statuses. Visualize the deployment of a Choreo project via the Cell view . View performance information in diagrams. Note With this integration, now, you do not need to log into Choreo from the Ballerina extension. You must have the Choreo extension installed to view performance data.","title":"Choreo extension integration"},{"location":"visual-programming/data-mapper/","text":"Data Mapper \u00b6 The visual Data Mapper is a tool, which allows you to visually translate data from one format to another (such as from one JSON format to another). It comes with an intuitive user interface and prevents the need of being aware of the programming logic underneath. When you map data via the user interface, the Data Mapper generates the required Ballerina source code. Since the Ballerina source code is the single source of truth for the Visual Data Mapper, it also lets you open and edit existing data mappings made via the source code without changing the user experience. Set up the prerequisites \u00b6 Follow the steps below to set up the prerequisites. Install the latest Ballerina version and the Ballerina Visual Studio Code extension . Execute the command below to create a package (if you are not already working on one). bal new data-transformation Open the created package in VS Code. Sample use case \u00b6 The below is a simple use case in which you will input data of people and courses in a specific structure and convert and transform those to a different format. Create three files with the sample data below in JSON format. Input 1: Person { \"id\": \"1001\", \"firstName\": \"Vinnie\", \"lastName\": \"Hickman\", \"age\": 15, \"country\": \"UK\" } Input 2: Course { \"id\": \"CS6002\", \"name\": \"Computation Structures\", \"credits\": 4 } Output { \"id\": \"1001F\", \"fullName\": \"Vinnie Hickman\", \"age\": \"15\", \"courses\": [ {\"title\": \"CS6002 - Computation Structures\", \"credits\": 4}, {\"title\": \"CS6003 - Circuits and Electronics\", \"credits\": 3}, {\"title\": \"CS6004 - Signals and Systems\", \"credits\": 3} ], \"totalCredits\": 10, \"visaType\": \"D tier-4\" } Open the Data Mapper \u00b6 There are two different ways of opening the Data Mapper. Open with the Visualize CodeLens \u00b6 Add the code below to the main.bal file of the package to define an empty expression bodied function. Info The preferred way to model the transformation logic in Ballerina is via expression-bodied functions. The expression-bodied function below will simply return nil. The function body of it is an expression, which will return a nil value. function name() => (); Once you add the above function, the VS Code extension will display a CodeLens called Visualize on top of the function. Click the Visualize CodeLens to go to the Data Mapper view. Open with the Diagram View \u00b6 Open the file in the Diagram View and click + Component button. Then, select the desired file and click Data Mapper in the Add Constructs pane. Provide inputs and output \u00b6 Once the Data mapper is opened, it will prompt you to provide inputs and output of the transformation function. Inputs and the output can be any data type in Ballerina. This example converts JSON and array of JSON to JSON, and thereby, you can use Ballerina record types as inputs and output. In the Data Mapper form, you have several options to provide the input and output records. If the records are already defined in your package, you can select one of those. If you are starting from scratch, you can either create the record from the Record Editor view or import a JSON to create a matching record. This example imports JSON files and creates the records as shown below. Once you define the input and the output types, click Save to open the mapping view. Define the mappings \u00b6 Let's see how to map the input fields with the fields in the JSON output. Basic mapping \u00b6 Map the person id to the student id as shown below. Info The mapping view will have the Inputs on the left hand side of the UI and the Output on the right. To map the fields, click on the input field and then, click the output field. If the input and output fields are compatible and can be mapped directly, you will see a solid line connecting them. Diagnose and fix mapping errors \u00b6 Use the toBalString lang lib function to convert the int to string as shown below. Info When you map the input fields to output fields, some of them might not be compatible due to type mismatch. In this example, if you map the person age to student age, it will result in an type mismatch error since the input age type is an integer and the output age type is a string. In this case, the Data Mapper will connect the two fields with a red line and show an alert sign. You can see the error by hovering over the alert sign. In this case, it will show the incompatible types: expected 'string', found 'int' error. To fix the error, hover over the alert sign and click Fix by editing expression . Then, the Data Mapper will pop out the expression editor for the specific expression. Now, you can modify the expression to return a string. Once you fix the error, the connection appears in blue to indicate that there are no errors. Aggregate input and output fields \u00b6 You can derive one output parameter by combining two or more input parameters. In this example, the value for the fullName output parameter is a combination of the values of the firstName and lastName input parameters. You can map them as shown below: Info To aggregate fields, you can map two or more fields to the same output field. The Data Mapper will automatically combine the two fields and assign them to the output field. By default, the fields will be combined with a plus operator. If you want to use a different operator or method to combine two fields, you can click on the Code button and customize the expression with the expression editor. Map the arrays \u00b6 To convert from one array type to another, you can simply map the input array to the output array. If the arrays are compatible, they will be connected with a blue line. If they are incompatible, the connecting line will appear in red. Info You can use Ballerina query support to convert one array type to another. To use a query in a Data Mapper, you can select the array by clicking on it. Then, it will provide you with several buttons. Click the code action button (bulb sign) and select Convert to query . Then, the Data Mapper will convert the mapping to a query. Then, move into the query and do the mapping between the array types. Process the data further You can further process the data within the query expression. Currently, the Data Mapper supports the following intermediate clauses. Clause Description Where Filter data based on a given condition. Let Define local variables within the query expression. Limit Limit the number of elements returned from the query expression. Order by Sort data within the query expression in ascending or descending order. Join Perform an inner join. Outer join Perform left outer join. Once the array type mapping is completed, select the transform function name in the top breadcrumb bar to navigate to the root view of mapping. Add local variables \u00b6 You can define local variables within the transformation function and re-use them in multiple places to avoid duplications. Info If there are no existing local variables, you can open up the local variable pane by clicking the Add Local Variable button. Otherwise, the defined local variables are listed down under local variables in the RHS of the UI. You will be able to access the local variable pane by clicking the Edit button there. Manipulate fields without drawing connections \u00b6 Click the triple dots button at the end of the field to see the actions that can be performed for the selected field. Initialize arrays, add, and delete elements Info The actions are provided based on the type of the selected field. If you click on the triple dots button of an array-typed field, you will see the Initialize Array option. Once the array is initialized, you can add array elements by clicking the + Add Element button. Furthermore, clicking the triple dots button on any array element will provide the option to delete that element. Add/Edit constant values/expressions Info If a particular field is empty and accepting a constant/expression, you will see the Add value action after clicking the triple dots button. This will open up the expression editor and you will be able to provide a constant value or construct any complex expression in it. Add a hard-coded visa type for foreign students. Info If a particular field is having a value, you will see the Edit value action once you click the triple dots button. Add an 'F' suffix to the student id of each foreign student. Fill the totalCredits field by getting the summation of the credits in each CS course. Tip You can use the reduce() array function for this by passing the combining function below to get the sum. var totalCredits = function(int total, record {string id; string name; int credits;} course) returns int => total + (course.id.startsWith(\"CS\") ? course.credits : 0); Now, you have successfully configured the transformation function using the Data Mapper. The following is the source associated with this guide along with a main function to invoke the transformation function with some sample data. import ballerina/io; type Person record { string id; string firstName; string lastName; int age; string country; }; type Course record { string id; string name; int credits; }; type Student record { string id; string fullName; string age; record { string title; int credits; }[] courses; int totalCredits; string visaType; }; const D_TIER_4_VISA = \"D tier-4\"; var totalCredits = function(int total, record {string id; string name; int credits;} course) returns int => total + (course.id.startsWith(\"CS\") ? course.credits : 0); function transform(Person person, Course[] courses) returns Student => let var isForeign = person.country != \"LK\" in { id: person.id + (isForeign ? \"F\" : \"\"), age: person.age.toString(), fullName: person.firstName + \" \" + person.lastName, courses: from var coursesItem in courses where coursesItem.id.startsWith(\"CS\") select { title: coursesItem.id + \" - \" + coursesItem.name, credits: coursesItem.credits }, visaType: isForeign ? D_TIER_4_VISA : \"n/a\", totalCredits: courses.reduce(totalCredits, 0) }; public function main() { Person person = { id: \"1001\", firstName: \"Vinnie\", lastName: \"Hickman\", age: 15, country: \"UK\" }; Course[] courses = [ { id: \"CS6002\", name: \"Computation Structures\", credits: 4 }, { id: \"CS6003\", name: \"Circuits and Electronics\", credits: 3 }, { id: \"CM1001\", name: \"Computational Statistics\", credits: 4 }, { id: \"CS6004\", name: \"Signals and Systems\", credits: 3 } ]; Student student = transform(person, courses); io:println(student); }","title":"Data Mapper"},{"location":"visual-programming/data-mapper/#data-mapper","text":"The visual Data Mapper is a tool, which allows you to visually translate data from one format to another (such as from one JSON format to another). It comes with an intuitive user interface and prevents the need of being aware of the programming logic underneath. When you map data via the user interface, the Data Mapper generates the required Ballerina source code. Since the Ballerina source code is the single source of truth for the Visual Data Mapper, it also lets you open and edit existing data mappings made via the source code without changing the user experience.","title":"Data Mapper"},{"location":"visual-programming/data-mapper/#set-up-the-prerequisites","text":"Follow the steps below to set up the prerequisites. Install the latest Ballerina version and the Ballerina Visual Studio Code extension . Execute the command below to create a package (if you are not already working on one). bal new data-transformation Open the created package in VS Code.","title":"Set up the prerequisites"},{"location":"visual-programming/data-mapper/#sample-use-case","text":"The below is a simple use case in which you will input data of people and courses in a specific structure and convert and transform those to a different format. Create three files with the sample data below in JSON format. Input 1: Person { \"id\": \"1001\", \"firstName\": \"Vinnie\", \"lastName\": \"Hickman\", \"age\": 15, \"country\": \"UK\" } Input 2: Course { \"id\": \"CS6002\", \"name\": \"Computation Structures\", \"credits\": 4 } Output { \"id\": \"1001F\", \"fullName\": \"Vinnie Hickman\", \"age\": \"15\", \"courses\": [ {\"title\": \"CS6002 - Computation Structures\", \"credits\": 4}, {\"title\": \"CS6003 - Circuits and Electronics\", \"credits\": 3}, {\"title\": \"CS6004 - Signals and Systems\", \"credits\": 3} ], \"totalCredits\": 10, \"visaType\": \"D tier-4\" }","title":"Sample use case"},{"location":"visual-programming/data-mapper/#open-the-data-mapper","text":"There are two different ways of opening the Data Mapper.","title":"Open the Data Mapper"},{"location":"visual-programming/data-mapper/#open-with-the-visualize-codelens","text":"Add the code below to the main.bal file of the package to define an empty expression bodied function. Info The preferred way to model the transformation logic in Ballerina is via expression-bodied functions. The expression-bodied function below will simply return nil. The function body of it is an expression, which will return a nil value. function name() => (); Once you add the above function, the VS Code extension will display a CodeLens called Visualize on top of the function. Click the Visualize CodeLens to go to the Data Mapper view.","title":"Open with the Visualize CodeLens"},{"location":"visual-programming/data-mapper/#open-with-the-diagram-view","text":"Open the file in the Diagram View and click + Component button. Then, select the desired file and click Data Mapper in the Add Constructs pane.","title":"Open with the Diagram View"},{"location":"visual-programming/data-mapper/#provide-inputs-and-output","text":"Once the Data mapper is opened, it will prompt you to provide inputs and output of the transformation function. Inputs and the output can be any data type in Ballerina. This example converts JSON and array of JSON to JSON, and thereby, you can use Ballerina record types as inputs and output. In the Data Mapper form, you have several options to provide the input and output records. If the records are already defined in your package, you can select one of those. If you are starting from scratch, you can either create the record from the Record Editor view or import a JSON to create a matching record. This example imports JSON files and creates the records as shown below. Once you define the input and the output types, click Save to open the mapping view.","title":"Provide inputs and output"},{"location":"visual-programming/data-mapper/#define-the-mappings","text":"Let's see how to map the input fields with the fields in the JSON output.","title":"Define the mappings"},{"location":"visual-programming/data-mapper/#basic-mapping","text":"Map the person id to the student id as shown below. Info The mapping view will have the Inputs on the left hand side of the UI and the Output on the right. To map the fields, click on the input field and then, click the output field. If the input and output fields are compatible and can be mapped directly, you will see a solid line connecting them.","title":"Basic mapping"},{"location":"visual-programming/data-mapper/#diagnose-and-fix-mapping-errors","text":"Use the toBalString lang lib function to convert the int to string as shown below. Info When you map the input fields to output fields, some of them might not be compatible due to type mismatch. In this example, if you map the person age to student age, it will result in an type mismatch error since the input age type is an integer and the output age type is a string. In this case, the Data Mapper will connect the two fields with a red line and show an alert sign. You can see the error by hovering over the alert sign. In this case, it will show the incompatible types: expected 'string', found 'int' error. To fix the error, hover over the alert sign and click Fix by editing expression . Then, the Data Mapper will pop out the expression editor for the specific expression. Now, you can modify the expression to return a string. Once you fix the error, the connection appears in blue to indicate that there are no errors.","title":"Diagnose and fix mapping errors"},{"location":"visual-programming/data-mapper/#aggregate-input-and-output-fields","text":"You can derive one output parameter by combining two or more input parameters. In this example, the value for the fullName output parameter is a combination of the values of the firstName and lastName input parameters. You can map them as shown below: Info To aggregate fields, you can map two or more fields to the same output field. The Data Mapper will automatically combine the two fields and assign them to the output field. By default, the fields will be combined with a plus operator. If you want to use a different operator or method to combine two fields, you can click on the Code button and customize the expression with the expression editor.","title":"Aggregate input and output fields"},{"location":"visual-programming/data-mapper/#map-the-arrays","text":"To convert from one array type to another, you can simply map the input array to the output array. If the arrays are compatible, they will be connected with a blue line. If they are incompatible, the connecting line will appear in red. Info You can use Ballerina query support to convert one array type to another. To use a query in a Data Mapper, you can select the array by clicking on it. Then, it will provide you with several buttons. Click the code action button (bulb sign) and select Convert to query . Then, the Data Mapper will convert the mapping to a query. Then, move into the query and do the mapping between the array types.","title":"Map the arrays"},{"location":"visual-programming/data-mapper/#add-local-variables","text":"You can define local variables within the transformation function and re-use them in multiple places to avoid duplications. Info If there are no existing local variables, you can open up the local variable pane by clicking the Add Local Variable button. Otherwise, the defined local variables are listed down under local variables in the RHS of the UI. You will be able to access the local variable pane by clicking the Edit button there.","title":"Add local variables"},{"location":"visual-programming/data-mapper/#manipulate-fields-without-drawing-connections","text":"Click the triple dots button at the end of the field to see the actions that can be performed for the selected field.","title":"Manipulate fields without drawing connections"},{"location":"visual-programming/graphql-designer/","text":"GraphQL Designer \u00b6 The GraphQL Designer streamlines the visual creation of GraphQL APIs in Ballerina. This powerful tool simplifies understanding and navigating of complex GraphQL services and lets you browse through them effortlessly without examining the code directly. Open the GraphQL Designer \u00b6 Use the source code below to create a GraphQL service using the code editor and click on the Visualize codeLens, which is placed above the service. import ballerina/graphql; public type Profile record {| string name; int age; Address address; |}; public type Address record {| string number; string street; string city; |}; service /graphql on new graphql:Listener(9090) { // A resource method with the `get` accessor inside a `graphql:Service` represents a field in the // root `Query` type. resource function get greeting() returns string { return \"Hello, World\"; } } Explore the GraphQL Designer \u00b6 The GraphQL Designer provides the following features. Add GraphQL queries, mutations, and subscription operations Create and edit constructs such as records and service classes Navigate to the specific source code Use the GraphQL Designer functionalities \u00b6 You can perform the above functionalities using the GraphQL Designer as follows. Add a GraphQL query \u00b6 Add a query to the GraphQL service with a Profile record as the output object. Info Hover over each field to view the provided Edit , Delete , and Design GraphQL operations. Access the query source \u00b6 Navigate to the source code of the newly created profile query and update the resource body. Use Ctrl + Click shortcut on the specific field to navigate to the respective source code. Create a record construct \u00b6 Create a record within the GraphQL designer itself. Info You can use this same approach to create service classes as well.","title":"GraphQL Designer"},{"location":"visual-programming/graphql-designer/#graphql-designer","text":"The GraphQL Designer streamlines the visual creation of GraphQL APIs in Ballerina. This powerful tool simplifies understanding and navigating of complex GraphQL services and lets you browse through them effortlessly without examining the code directly.","title":"GraphQL Designer"},{"location":"visual-programming/graphql-designer/#open-the-graphql-designer","text":"Use the source code below to create a GraphQL service using the code editor and click on the Visualize codeLens, which is placed above the service. import ballerina/graphql; public type Profile record {| string name; int age; Address address; |}; public type Address record {| string number; string street; string city; |}; service /graphql on new graphql:Listener(9090) { // A resource method with the `get` accessor inside a `graphql:Service` represents a field in the // root `Query` type. resource function get greeting() returns string { return \"Hello, World\"; } }","title":"Open the GraphQL Designer"},{"location":"visual-programming/graphql-designer/#explore-the-graphql-designer","text":"The GraphQL Designer provides the following features. Add GraphQL queries, mutations, and subscription operations Create and edit constructs such as records and service classes Navigate to the specific source code","title":"Explore the GraphQL Designer"},{"location":"visual-programming/graphql-designer/#use-the-graphql-designer-functionalities","text":"You can perform the above functionalities using the GraphQL Designer as follows.","title":"Use the GraphQL Designer functionalities"},{"location":"visual-programming/graphql-designer/#add-a-graphql-query","text":"Add a query to the GraphQL service with a Profile record as the output object. Info Hover over each field to view the provided Edit , Delete , and Design GraphQL operations.","title":"Add a GraphQL query"},{"location":"visual-programming/graphql-designer/#access-the-query-source","text":"Navigate to the source code of the newly created profile query and update the resource body. Use Ctrl + Click shortcut on the specific field to navigate to the respective source code.","title":"Access the query source"},{"location":"visual-programming/graphql-designer/#create-a-record-construct","text":"Create a record within the GraphQL designer itself. Info You can use this same approach to create service classes as well.","title":"Create a record construct"},{"location":"visual-programming/http-api-designer/","text":"HTTP API Designer \u00b6 The new HTTP API Designer enables you to design HTTP services interactively. This feature allows you to design services rapidly without the need to have extensive knowledge of the HTTP service syntax of Ballerina. Open the service \u00b6 To open the HTTP API designer, add an HTTP service using the code or the Add button in the visual editor and then, click the Visualize CodeLens, which is placed above the HTTP service. Visualize the service \u00b6 The HTTP API Designer provides an overview of the design of the service resources. This gives a broad idea of the behavior of the service. It will visualize the service similar to the OpenAPI viewer. You can see the parameters and response details. Also, you can interact with record types and modify type definitions from the Statement Editor . Add resources to the service \u00b6 The HTTP API designer lets you implement a service in Ballerina from scratch with a little knowledge of coding syntax or by using an existing API. Therefore, the API Designer will help you to get started with the developments of a service by providing you with the basic standard templates. Follow the steps below to add resources to the service. Click the + Resource button placed at the top of the Service View . Enter the required parameters below in the resource form to add a new resource. Path parameters Query/Header parameters Payload body Request/Caller parameters Tip To add a parameter, click on the + button placed next to the parameter. Error messages will be displayed if there are any. Select the types of return codes. Click the Add resource button to add a new return response type and select the specific status codes that need to be returned from the resource. Tip Enter the desired name for the record type, and then click the Create Record button to create new type records. Define name records for the response type, which will apply the coding best practices to implement the resource. Implement the resources of the service \u00b6 Either navigate to the low-code editing mode, or press Ctrl + click on a resource method to navigate to the source code to start implementing the content of the resource.","title":"HTTP API Designer"},{"location":"visual-programming/http-api-designer/#http-api-designer","text":"The new HTTP API Designer enables you to design HTTP services interactively. This feature allows you to design services rapidly without the need to have extensive knowledge of the HTTP service syntax of Ballerina.","title":"HTTP API Designer"},{"location":"visual-programming/http-api-designer/#open-the-service","text":"To open the HTTP API designer, add an HTTP service using the code or the Add button in the visual editor and then, click the Visualize CodeLens, which is placed above the HTTP service.","title":"Open the service"},{"location":"visual-programming/http-api-designer/#visualize-the-service","text":"The HTTP API Designer provides an overview of the design of the service resources. This gives a broad idea of the behavior of the service. It will visualize the service similar to the OpenAPI viewer. You can see the parameters and response details. Also, you can interact with record types and modify type definitions from the Statement Editor .","title":"Visualize the service"},{"location":"visual-programming/http-api-designer/#add-resources-to-the-service","text":"The HTTP API designer lets you implement a service in Ballerina from scratch with a little knowledge of coding syntax or by using an existing API. Therefore, the API Designer will help you to get started with the developments of a service by providing you with the basic standard templates. Follow the steps below to add resources to the service. Click the + Resource button placed at the top of the Service View . Enter the required parameters below in the resource form to add a new resource. Path parameters Query/Header parameters Payload body Request/Caller parameters Tip To add a parameter, click on the + button placed next to the parameter. Error messages will be displayed if there are any. Select the types of return codes. Click the Add resource button to add a new return response type and select the specific status codes that need to be returned from the resource. Tip Enter the desired name for the record type, and then click the Create Record button to create new type records. Define name records for the response type, which will apply the coding best practices to implement the resource.","title":"Add resources to the service"},{"location":"visual-programming/http-api-designer/#implement-the-resources-of-the-service","text":"Either navigate to the low-code editing mode, or press Ctrl + click on a resource method to navigate to the source code to start implementing the content of the resource.","title":"Implement the resources of the service"},{"location":"visual-programming/sequence-diagram-view/","text":"Sequence Diagram view \u00b6 When you use the Ballerina VS Code extension, you can view your code in graphical mode and develop your program logic through it. This allows you to look at your program logic holistically and comprehend the program at a glance. This visual representation has its roots in sequence diagrams and can capture how the logic of your program flows, how the concurrent execution flow works, which remote endpoints are involved, and how those endpoints interact with the different objects in the program. Switch to graphical mode \u00b6 There are two methods for switching to the graphical mode using the VS Code extension. Using the Visualize code lense that appears in the editor. Click Show Diagram in the editor group. Shown below is the code editor and graphical editor in view graphical mode is focused on the function main. Graphical representation of code \u00b6 Ballerina code can be represented graphically in the following ways. Functions \u00b6 Graphical representations of functions are based on sequence diagrams. Each function has a lifeline with a start and end, and this lifeline represents the flow of the function logic. Source code import ballerina/io; import ballerina/random; public function main() { io:println(\"Hello, World!\"); if random:createIntInRange(1, 100) == 22 { io:println(\"the number is 22\"); } else { io:println(\"the number is not 22\"); } io:println(\"Program exit\"); } Graphical view Concurrent execution \u00b6 Concurrent executions are supported in Ballerina through workers. Each worker has a lifeline that runs parallel to the lifeline of the main function body. The diagram also captures asynchronous messaging between workers. The following example shows how asynchronous messaging is represented in the diagram. Source code public function FunctionWithWorker() { worker A { int num = 10; // Sends the `10` integer value to the `B` worker asynchronously. num -> B; // Receives the `Hello` string from the `B` worker. string msg = <- B; io:println(string `Received string \"${msg}\" from worker B`); } worker B { int num; // Receives the `10` integer value from the `A` worker. num = <- A; io:println(string `Received integer \"${num}\" from worker A`); // Sends the `Hello` string to the `A` worker asynchronously. string msg = \"Hello\"; msg -> A; } wait A; io:println(\"Woker A execution finished\"); } Graphical view Remote endpoints and clients \u00b6 Ballerina specifies interactions with remote endpoints through its syntax. These interactions are presented graphically in the diagram view by giving each endpoint a lifeline. This endpoint lifeline represents the messages that the endpoint can receive. The following code shows an HTTP client that is used for the GET and POST requests sent to a remote endpoint. Source code import ballerina/http; configurable string lookupUrl = ?; configurable string reportUrl = ?; function execute() returns error? { http:Client lookupService = check new (lookupUrl); http:Client reportService = check new (reportUrl); json result = check lookupService->get(\"/query\"); http:Response response = check reportService->post(\"/report\", result); } Graphical view Develop programs in graphical mode \u00b6 You can interact with the diagram using the plus icons placed in the lifeline. You can add a statement at the function execution flow by clicking Add .","title":"Sequence Diagram view"},{"location":"visual-programming/sequence-diagram-view/#sequence-diagram-view","text":"When you use the Ballerina VS Code extension, you can view your code in graphical mode and develop your program logic through it. This allows you to look at your program logic holistically and comprehend the program at a glance. This visual representation has its roots in sequence diagrams and can capture how the logic of your program flows, how the concurrent execution flow works, which remote endpoints are involved, and how those endpoints interact with the different objects in the program.","title":"Sequence Diagram view"},{"location":"visual-programming/sequence-diagram-view/#switch-to-graphical-mode","text":"There are two methods for switching to the graphical mode using the VS Code extension. Using the Visualize code lense that appears in the editor. Click Show Diagram in the editor group. Shown below is the code editor and graphical editor in view graphical mode is focused on the function main.","title":"Switch to graphical mode"},{"location":"visual-programming/sequence-diagram-view/#graphical-representation-of-code","text":"Ballerina code can be represented graphically in the following ways.","title":"Graphical representation of code"},{"location":"visual-programming/sequence-diagram-view/#functions","text":"Graphical representations of functions are based on sequence diagrams. Each function has a lifeline with a start and end, and this lifeline represents the flow of the function logic. Source code import ballerina/io; import ballerina/random; public function main() { io:println(\"Hello, World!\"); if random:createIntInRange(1, 100) == 22 { io:println(\"the number is 22\"); } else { io:println(\"the number is not 22\"); } io:println(\"Program exit\"); } Graphical view","title":"Functions"},{"location":"visual-programming/sequence-diagram-view/#concurrent-execution","text":"Concurrent executions are supported in Ballerina through workers. Each worker has a lifeline that runs parallel to the lifeline of the main function body. The diagram also captures asynchronous messaging between workers. The following example shows how asynchronous messaging is represented in the diagram. Source code public function FunctionWithWorker() { worker A { int num = 10; // Sends the `10` integer value to the `B` worker asynchronously. num -> B; // Receives the `Hello` string from the `B` worker. string msg = <- B; io:println(string `Received string \"${msg}\" from worker B`); } worker B { int num; // Receives the `10` integer value from the `A` worker. num = <- A; io:println(string `Received integer \"${num}\" from worker A`); // Sends the `Hello` string to the `A` worker asynchronously. string msg = \"Hello\"; msg -> A; } wait A; io:println(\"Woker A execution finished\"); } Graphical view","title":"Concurrent execution"},{"location":"visual-programming/sequence-diagram-view/#remote-endpoints-and-clients","text":"Ballerina specifies interactions with remote endpoints through its syntax. These interactions are presented graphically in the diagram view by giving each endpoint a lifeline. This endpoint lifeline represents the messages that the endpoint can receive. The following code shows an HTTP client that is used for the GET and POST requests sent to a remote endpoint. Source code import ballerina/http; configurable string lookupUrl = ?; configurable string reportUrl = ?; function execute() returns error? { http:Client lookupService = check new (lookupUrl); http:Client reportService = check new (reportUrl); json result = check lookupService->get(\"/query\"); http:Response response = check reportService->post(\"/report\", result); } Graphical view","title":"Remote endpoints and clients"},{"location":"visual-programming/sequence-diagram-view/#develop-programs-in-graphical-mode","text":"You can interact with the diagram using the plus icons placed in the lifeline. You can add a statement at the function execution flow by clicking Add .","title":"Develop programs in graphical mode"},{"location":"visual-programming/architecture-view/architecture-diagram/","text":"Architecture Diagram \u00b6 Software applications have evolved into a composition of multiple interrelated components to be able to handle increasing complexities. When the number and/or depth of such components grow, it is convenient to have a high-level picture of the system components and their interactions. The Architecture View of the Ballerina VS Code extension (i.e., formerly, the Project Design View ) provides a high-level picture of Ballerina projects purely based on the source code. Learn related concepts \u00b6 Before getting started with the Architecture View, the following are a few concepts that are essential to be aware of. Ballerina project \u00b6 Ballerina project is a collection of one or more Ballerina packages . Project workspace \u00b6 A Ballerina project is contained using a VS Code workspace . To use the Architecture View, you need to have all the Ballerina packages added to the VS Code editor as a workspace. Tip You can save your VS Code workspace as a file and use this file to access the workspace thereafter. Service identifiers \u00b6 Since multiple services can have the same path, this tool depends on an annotation to uniquely identify the services within the project. The current approach to do so is via the display annotation, which is a general-purpose annotation that can be used in Ballerina source. By providing a unique value to the id field of the display annotation, you can assign an identifier to each service. For reference, the CurrencyService in the following code snippet has been annotated with an ID of the currency value and this identifier will be used to differentiate the service throughout the project. @display { label: \"CurrencyService\", id: \"currency\" } @grpc:ServiceDescriptor {descriptor: ROOT_DESCRIPTOR, descMap: getDescriptorMapDemo()} service \"CurrencyService\" on ep { final map<decimal> & readonly currencyMap; function init() returns error? { json currencyJson = check io:fileReadJson(currencyJsonPath); self.currencyMap = check parseCurrencyJson(currencyJson).cloneReadOnly(); } remote function GetSupportedCurrencies(Empty value) returns GetSupportedCurrenciesResponse|error { return {currency_codes: self.currencyMap.keys()}; } } If other services in your project interact with this Currency Service , this same identifier has to be provided upon creating the client endpoint. By doing so, it makes it possible to uniquely identify and link the service interactions between one another. For example, the code snippet below invokes the Currency Service from a different component. isolated function getSupportedCurrencies() returns string[]|error { @display { label: \"CurrencyService\", id: \"currency\" } final CurrencyServiceClient currencyClient = check new (\"http://localhost:9093\"); GetSupportedCurrenciesResponse|grpc:Error supportedCurrencies = currencyClient->GetSupportedCurrencies({}); if supportedCurrencies is grpc:Error { log:printError(\"failed to call getSupportedCurrencies from currency service\"); return supportedCurrencies; } return supportedCurrencies.currency_codes; } Tip The label attribute of the display annotation can be used to label the services in the diagram. Service resources \u00b6 For the diagram to be able to detect interactions, the resource invocations between services need to be done using client access actions . Access the Architecture View \u00b6 This guide uses the Online Boutique microservices demo to demonstrate the different capabilities of the Architecture View. This sample has 10 services (9 GRPC and one HTTP) in 10 separate Ballerina packages. The ui folder is not a Ballerina package, hence would not make an impact. To set up a Ballerina project as a VS Code workspace, add all the Ballerina packages to the workspace using one of the following methods: Add each Ballerina package to the workspace using the Add folder to workspace option in the VS Code editor. Info When the workspace is set up, you will see the following folder structure in the Explorer . The workspace name may be different if you set up the workspace from scratch. Use the VS Code workspace file from an already created workspace to import its packages to a new workspace. Info The workspace file of the Online Boutique microservices demo is available in the repository. Once the packages are added to the workspace, activate the Architecture View via the Ballerina: Architecture View command in the command palette. Explore the Architecture View \u00b6 Explore the features of the Architecture View using the Online Boutique microservices demo Ballerina project that you set up in the previous section. Once you open the Architecture View, you will see the following types of diagrams. Service Diagram Level 1 \u00b6 This diagram displays all the services available within the workspace with links representing any interactions between them. The basic Service Diagram (Level 1) generated for the 10 Ballerina packages in the Online Boutique microservices demo project is shown below. Info The link between the Checkout service and the Email service indicates that a resource of the Checkout service invokes the Email service. In addition to this, the Email service also invokes an external service via a connector. Service Diagram Level 2 \u00b6 The detailed Level 2 Service Diagram (resources) dives deeper into the compositions of the services and the interactions between them. The below is the detailed representation of the demo project, which depicts the individual resource/remote functions of the services and their invocations. The data types of the request and response bodies of the interactions can be viewed by hovering over a particular invocation. If these data types are Ballerina records, click on them to access the composition of the particular record. Type Diagram \u00b6 The Type Diagram provides a comprehensive view of all the Ballerina record types defined in the project workspace and their associations. For more details, see Type Diagram . Other capabilities of the Architecture View \u00b6 In addition to the above, the Architecture View includes the following features. Filter the services and types based on the packages Navigate to the source code from diagram components Rearrange the diagram Export the diagrams in JPEG format","title":"Architecture Diagram"},{"location":"visual-programming/architecture-view/architecture-diagram/#architecture-diagram","text":"Software applications have evolved into a composition of multiple interrelated components to be able to handle increasing complexities. When the number and/or depth of such components grow, it is convenient to have a high-level picture of the system components and their interactions. The Architecture View of the Ballerina VS Code extension (i.e., formerly, the Project Design View ) provides a high-level picture of Ballerina projects purely based on the source code.","title":"Architecture Diagram"},{"location":"visual-programming/architecture-view/architecture-diagram/#learn-related-concepts","text":"Before getting started with the Architecture View, the following are a few concepts that are essential to be aware of.","title":"Learn related concepts"},{"location":"visual-programming/architecture-view/architecture-diagram/#ballerina-project","text":"Ballerina project is a collection of one or more Ballerina packages .","title":"Ballerina project"},{"location":"visual-programming/architecture-view/architecture-diagram/#project-workspace","text":"A Ballerina project is contained using a VS Code workspace . To use the Architecture View, you need to have all the Ballerina packages added to the VS Code editor as a workspace. Tip You can save your VS Code workspace as a file and use this file to access the workspace thereafter.","title":"Project workspace"},{"location":"visual-programming/architecture-view/architecture-diagram/#service-identifiers","text":"Since multiple services can have the same path, this tool depends on an annotation to uniquely identify the services within the project. The current approach to do so is via the display annotation, which is a general-purpose annotation that can be used in Ballerina source. By providing a unique value to the id field of the display annotation, you can assign an identifier to each service. For reference, the CurrencyService in the following code snippet has been annotated with an ID of the currency value and this identifier will be used to differentiate the service throughout the project. @display { label: \"CurrencyService\", id: \"currency\" } @grpc:ServiceDescriptor {descriptor: ROOT_DESCRIPTOR, descMap: getDescriptorMapDemo()} service \"CurrencyService\" on ep { final map<decimal> & readonly currencyMap; function init() returns error? { json currencyJson = check io:fileReadJson(currencyJsonPath); self.currencyMap = check parseCurrencyJson(currencyJson).cloneReadOnly(); } remote function GetSupportedCurrencies(Empty value) returns GetSupportedCurrenciesResponse|error { return {currency_codes: self.currencyMap.keys()}; } } If other services in your project interact with this Currency Service , this same identifier has to be provided upon creating the client endpoint. By doing so, it makes it possible to uniquely identify and link the service interactions between one another. For example, the code snippet below invokes the Currency Service from a different component. isolated function getSupportedCurrencies() returns string[]|error { @display { label: \"CurrencyService\", id: \"currency\" } final CurrencyServiceClient currencyClient = check new (\"http://localhost:9093\"); GetSupportedCurrenciesResponse|grpc:Error supportedCurrencies = currencyClient->GetSupportedCurrencies({}); if supportedCurrencies is grpc:Error { log:printError(\"failed to call getSupportedCurrencies from currency service\"); return supportedCurrencies; } return supportedCurrencies.currency_codes; } Tip The label attribute of the display annotation can be used to label the services in the diagram.","title":"Service identifiers"},{"location":"visual-programming/architecture-view/architecture-diagram/#service-resources","text":"For the diagram to be able to detect interactions, the resource invocations between services need to be done using client access actions .","title":"Service resources"},{"location":"visual-programming/architecture-view/architecture-diagram/#access-the-architecture-view","text":"This guide uses the Online Boutique microservices demo to demonstrate the different capabilities of the Architecture View. This sample has 10 services (9 GRPC and one HTTP) in 10 separate Ballerina packages. The ui folder is not a Ballerina package, hence would not make an impact. To set up a Ballerina project as a VS Code workspace, add all the Ballerina packages to the workspace using one of the following methods: Add each Ballerina package to the workspace using the Add folder to workspace option in the VS Code editor. Info When the workspace is set up, you will see the following folder structure in the Explorer . The workspace name may be different if you set up the workspace from scratch. Use the VS Code workspace file from an already created workspace to import its packages to a new workspace. Info The workspace file of the Online Boutique microservices demo is available in the repository. Once the packages are added to the workspace, activate the Architecture View via the Ballerina: Architecture View command in the command palette.","title":"Access the Architecture View"},{"location":"visual-programming/architecture-view/architecture-diagram/#explore-the-architecture-view","text":"Explore the features of the Architecture View using the Online Boutique microservices demo Ballerina project that you set up in the previous section. Once you open the Architecture View, you will see the following types of diagrams.","title":"Explore the Architecture View"},{"location":"visual-programming/architecture-view/architecture-diagram/#service-diagram-level-1","text":"This diagram displays all the services available within the workspace with links representing any interactions between them. The basic Service Diagram (Level 1) generated for the 10 Ballerina packages in the Online Boutique microservices demo project is shown below. Info The link between the Checkout service and the Email service indicates that a resource of the Checkout service invokes the Email service. In addition to this, the Email service also invokes an external service via a connector.","title":"Service Diagram Level 1"},{"location":"visual-programming/architecture-view/architecture-diagram/#service-diagram-level-2","text":"The detailed Level 2 Service Diagram (resources) dives deeper into the compositions of the services and the interactions between them. The below is the detailed representation of the demo project, which depicts the individual resource/remote functions of the services and their invocations. The data types of the request and response bodies of the interactions can be viewed by hovering over a particular invocation. If these data types are Ballerina records, click on them to access the composition of the particular record.","title":"Service Diagram Level 2"},{"location":"visual-programming/architecture-view/architecture-diagram/#type-diagram","text":"The Type Diagram provides a comprehensive view of all the Ballerina record types defined in the project workspace and their associations. For more details, see Type Diagram .","title":"Type Diagram"},{"location":"visual-programming/architecture-view/architecture-diagram/#other-capabilities-of-the-architecture-view","text":"In addition to the above, the Architecture View includes the following features. Filter the services and types based on the packages Navigate to the source code from diagram components Rearrange the diagram Export the diagrams in JPEG format","title":"Other capabilities of the Architecture View"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/","text":"Design using the Architecture Diagram \u00b6 The Architecture View includes a range of editing capabilities that makes it possible to design projects via the diagram. The sections below explore these capabilities by executing the Architecture View command on an empty workspace. Add components \u00b6 As prompted above, you can use the Add Component option to add the first component of your project as shown below. Info If your project has components, you can use the Add Component option on the top left corner of the diagram to do the same. Delete components \u00b6 If any other component in your project is not dependent on a particular component, you can delete them using the Delete Component option available on the node menu (seen on hover of a node). This option will provide you with two choices: either to delete only the particular service or to delete the entire Ballerina package. Link to an internal API \u00b6 You can create links between your project components using the Use Internal API option in the node menu. This will introduce a service-level client in your source service, which you can configure and use thereafter. Link to an external API \u00b6 You can invoke an external endpoint using the Use External API option in the node menu. This will prompt you to a connector marketplace from which you can choose the required external endpoint. Delete links \u00b6 By hovering over a link, you can choose to remove the particular interaction in your diagram. This will result in the deletion of the client that was used to interact between the services. Edit diagram labels \u00b6 You can edit the display names of your project components using the Edit Label option in the node menu. This will update the label value of the particular component\u2019s display annotation.","title":"Design using the Architecture Diagram"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/#design-using-the-architecture-diagram","text":"The Architecture View includes a range of editing capabilities that makes it possible to design projects via the diagram. The sections below explore these capabilities by executing the Architecture View command on an empty workspace.","title":"Design using the Architecture Diagram"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/#add-components","text":"As prompted above, you can use the Add Component option to add the first component of your project as shown below. Info If your project has components, you can use the Add Component option on the top left corner of the diagram to do the same.","title":"Add components"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/#delete-components","text":"If any other component in your project is not dependent on a particular component, you can delete them using the Delete Component option available on the node menu (seen on hover of a node). This option will provide you with two choices: either to delete only the particular service or to delete the entire Ballerina package.","title":"Delete components"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/#link-to-an-internal-api","text":"You can create links between your project components using the Use Internal API option in the node menu. This will introduce a service-level client in your source service, which you can configure and use thereafter.","title":"Link to an internal API"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/#link-to-an-external-api","text":"You can invoke an external endpoint using the Use External API option in the node menu. This will prompt you to a connector marketplace from which you can choose the required external endpoint.","title":"Link to an external API"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/#delete-links","text":"By hovering over a link, you can choose to remove the particular interaction in your diagram. This will result in the deletion of the client that was used to interact between the services.","title":"Delete links"},{"location":"visual-programming/architecture-view/design-using-architecture-diagram/#edit-diagram-labels","text":"You can edit the display names of your project components using the Edit Label option in the node menu. This will update the label value of the particular component\u2019s display annotation.","title":"Edit diagram labels"},{"location":"visual-programming/architecture-view/type-diagram/","text":"Type Diagram \u00b6 The Type Diagram provides a comprehensive view of all the Ballerina record types defined in the project workspace and their associations. This can be accessed via the Architecture View command as shown below. The following is a snippet of the Type Diagram generated for the Online Boutique Microservices demo . Tip The multiplicities of the associations are represented on either side of the connector while the type inclusions are differentiated using a directed link (represents inheritance). Composition Diagram \u00b6 You can also view the composition of an individual record type. Use either of the methods below to access these composition diagrams. Click the record types that are included in the request/response bodies of the service invocations shown in the Level 2 Service Diagram . Click the head of the records displayed in the Type Diagram . The below is the Composition Diagram generated for the ContextSearchProductsResponse record type shown in the Type Diagram above.","title":"Type Diagram"},{"location":"visual-programming/architecture-view/type-diagram/#type-diagram","text":"The Type Diagram provides a comprehensive view of all the Ballerina record types defined in the project workspace and their associations. This can be accessed via the Architecture View command as shown below. The following is a snippet of the Type Diagram generated for the Online Boutique Microservices demo . Tip The multiplicities of the associations are represented on either side of the connector while the type inclusions are differentiated using a directed link (represents inheritance).","title":"Type Diagram"},{"location":"visual-programming/architecture-view/type-diagram/#composition-diagram","text":"You can also view the composition of an individual record type. Use either of the methods below to access these composition diagrams. Click the record types that are included in the request/response bodies of the service invocations shown in the Level 2 Service Diagram . Click the head of the records displayed in the Type Diagram . The below is the Composition Diagram generated for the ContextSearchProductsResponse record type shown in the Type Diagram above.","title":"Composition Diagram"},{"location":"customizations/","text":"Customizations done to the material theme \u00b6 Layout, text, and image changes \u00b6 images/favicon.png images/wso2-logo-white.svg main.html templates/no-nav.html templates/swagger.html templates/2-column.html templates/single-column.html partials/nav-item.html partials/toc.html partials/tabs.html partials/language/en.html partials/footer.html partials/header.html partials/tabs-item.html partials/nav.html Search optimizations (note: the following are generated files) \u00b6 base.html assets/javascripts/application.c3ee3888.js assets/javascripts/modernizr.268332fc.js assets/stylesheets/application.1b62728e.css assets/stylesheets/application-palette.a8b3c06d.css How to patch the mkdocs-material theme to apply search optimizations \u00b6 Clone https://github.com/squidfunk/mkdocs-material (tag 4.5.1 ) Apply following diffs Boost title weight in search score related commit diff --git a/src/assets/javascripts/components/Material/Search/Result.jsx b/src/assets/javascripts/components/Material/Search/Result.jsx index 97a2f63e..0f54ae56 100644 --- a/src/assets/javascripts/components/Material/Search/Result.jsx +++ b/src/assets/javascripts/components/Material/Search/Result.jsx @@ -293,15 +293,14 @@ export default class Result { /* Append trailing wildcard to all terms for prefix querying */ .query(query => { + query.term(this.value_, { usePipeline: false, + fields: [\"title\"], boost: 200, + wildcard: lunr.Query.wildcard.TRAILING }) this.value_.toLowerCase().split(\" \") .filter(Boolean) .forEach(term => { - query.term(term, { wildcard: lunr.Query.wildcard.TRAILING }) - query.term(term, { - fields: [\"title\"], - boost: 200, - usePipeline: false - }) + query.term(term, { fields: [\"text\"], + boost: 1 }) }) }) - Add a loader [related commit](https://github.com/tmkasun/mkdocs-material/commit/3e92e6cd0c72bbee571cacd6941c87d25e3dd6aa) diff --git a/src/assets/javascripts/application.js b/src/assets/javascripts/application.js index 1962eea7..b3203a57 100644 --- a/src/assets/javascripts/application.js +++ b/src/assets/javascripts/application.js @@ -281,10 +281,12 @@ function initialize(config) { // eslint-disable-line func-style new Material.Search.Lock(\"[data-md-toggle=search]\"))) /* Component: search results */ + fetch(`${config.url.base}/search/search_index.json`) new Material.Event.Listener(\"[data-md-component=query]\", [ \"focus\", \"keyup\", \"change\" ], new Material.Search.Result(\"[data-md-component=result]\", () => { return fetch(`${config.url.base}/search/search_index.json`, { + cache: \"force-cache\", credentials: \"same-origin\" }).then(response => response.json()) .then(data => { diff --git a/src/assets/javascripts/components/Material/Search/Result.jsx b/src/assets/javascripts/components/Material/Search/Result.jsx index 4c876de5..889a8ff2 100644 --- a/src/assets/javascripts/components/Material/Search/Result.jsx +++ b/src/assets/javascripts/components/Material/Search/Result.jsx @@ -161,9 +161,20 @@ export default class Result { /* Initialize index, if this has not be done yet */ if (ev.type === \"focus\" && !this.index_) { + document.querySelector(\".md-search__icon\").classList + .add(\"md-search-loader\") + if (this.isInitializing) { + return + } else { + this.isInitializing = true + } + this.meta_.textContent = \"Please wait while loading the indexes . . .\" /* Initialize index */ const init = data => { + document.querySelector(\".md-search__icon\").classList + .remove(\"md-search-loader\") + this.meta_.textContent = this.message_.placeholder /* Preprocess and index sections and documents */ this.docs_ = data.reduce((docs, doc) => { diff --git a/webpack.config.js b/webpack.config.js index aa273d2f..e0d7d785 100644 --- a/webpack.config.js +++ b/webpack.config.js @@ -255,20 +255,10 @@ module.exports = (_env, args) => { // eslint-disable-line complexity }, /* Sourcemaps */ - devtool: args.mode !== \"production\" ? \"inline-source-map\" : \"\", + devtool: \"source-map\", /* Optimizations */ optimization: { - minimizer: [ - new UglifyJsPlugin({ - uglifyOptions: { - output: { - comments: /^!/ - } - } - }), - new OptimizeCSSAssetsPlugin() - ], splitChunks: { cacheGroups: { commons: { Run npm run build Remove the following files from docs-apim/en/ in your https://github.com/wso2/docs-apim clone. theme/material/assets/javascripts/application.*.js theme/material/assets/javascripts/modernizr.*.js theme/material/assets/stylesheets/application-palette.*.css theme/material/assets/stylesheets/application.*.css theme/material/base.html Copy the the new files back to your docs-apim clone from the mkdocs-material clone you built at step 3. material/assets/javascripts/application.*.js material/assets/javascripts/modernizr.*.js material/assets/stylesheets/application* material/base.html","title":"Customizations done to the `material` theme"},{"location":"customizations/#customizations-done-to-the-material-theme","text":"","title":"Customizations done to the material theme"},{"location":"customizations/#layout-text-and-image-changes","text":"images/favicon.png images/wso2-logo-white.svg main.html templates/no-nav.html templates/swagger.html templates/2-column.html templates/single-column.html partials/nav-item.html partials/toc.html partials/tabs.html partials/language/en.html partials/footer.html partials/header.html partials/tabs-item.html partials/nav.html","title":"Layout, text, and image changes"},{"location":"customizations/#search-optimizations-note-the-following-are-generated-files","text":"base.html assets/javascripts/application.c3ee3888.js assets/javascripts/modernizr.268332fc.js assets/stylesheets/application.1b62728e.css assets/stylesheets/application-palette.a8b3c06d.css","title":"Search optimizations (note: the following are generated files)"},{"location":"customizations/#how-to-patch-the-mkdocs-material-theme-to-apply-search-optimizations","text":"Clone https://github.com/squidfunk/mkdocs-material (tag 4.5.1 ) Apply following diffs Boost title weight in search score related commit diff --git a/src/assets/javascripts/components/Material/Search/Result.jsx b/src/assets/javascripts/components/Material/Search/Result.jsx index 97a2f63e..0f54ae56 100644 --- a/src/assets/javascripts/components/Material/Search/Result.jsx +++ b/src/assets/javascripts/components/Material/Search/Result.jsx @@ -293,15 +293,14 @@ export default class Result { /* Append trailing wildcard to all terms for prefix querying */ .query(query => { + query.term(this.value_, { usePipeline: false, + fields: [\"title\"], boost: 200, + wildcard: lunr.Query.wildcard.TRAILING }) this.value_.toLowerCase().split(\" \") .filter(Boolean) .forEach(term => { - query.term(term, { wildcard: lunr.Query.wildcard.TRAILING }) - query.term(term, { - fields: [\"title\"], - boost: 200, - usePipeline: false - }) + query.term(term, { fields: [\"text\"], + boost: 1 }) }) }) - Add a loader [related commit](https://github.com/tmkasun/mkdocs-material/commit/3e92e6cd0c72bbee571cacd6941c87d25e3dd6aa) diff --git a/src/assets/javascripts/application.js b/src/assets/javascripts/application.js index 1962eea7..b3203a57 100644 --- a/src/assets/javascripts/application.js +++ b/src/assets/javascripts/application.js @@ -281,10 +281,12 @@ function initialize(config) { // eslint-disable-line func-style new Material.Search.Lock(\"[data-md-toggle=search]\"))) /* Component: search results */ + fetch(`${config.url.base}/search/search_index.json`) new Material.Event.Listener(\"[data-md-component=query]\", [ \"focus\", \"keyup\", \"change\" ], new Material.Search.Result(\"[data-md-component=result]\", () => { return fetch(`${config.url.base}/search/search_index.json`, { + cache: \"force-cache\", credentials: \"same-origin\" }).then(response => response.json()) .then(data => { diff --git a/src/assets/javascripts/components/Material/Search/Result.jsx b/src/assets/javascripts/components/Material/Search/Result.jsx index 4c876de5..889a8ff2 100644 --- a/src/assets/javascripts/components/Material/Search/Result.jsx +++ b/src/assets/javascripts/components/Material/Search/Result.jsx @@ -161,9 +161,20 @@ export default class Result { /* Initialize index, if this has not be done yet */ if (ev.type === \"focus\" && !this.index_) { + document.querySelector(\".md-search__icon\").classList + .add(\"md-search-loader\") + if (this.isInitializing) { + return + } else { + this.isInitializing = true + } + this.meta_.textContent = \"Please wait while loading the indexes . . .\" /* Initialize index */ const init = data => { + document.querySelector(\".md-search__icon\").classList + .remove(\"md-search-loader\") + this.meta_.textContent = this.message_.placeholder /* Preprocess and index sections and documents */ this.docs_ = data.reduce((docs, doc) => { diff --git a/webpack.config.js b/webpack.config.js index aa273d2f..e0d7d785 100644 --- a/webpack.config.js +++ b/webpack.config.js @@ -255,20 +255,10 @@ module.exports = (_env, args) => { // eslint-disable-line complexity }, /* Sourcemaps */ - devtool: args.mode !== \"production\" ? \"inline-source-map\" : \"\", + devtool: \"source-map\", /* Optimizations */ optimization: { - minimizer: [ - new UglifyJsPlugin({ - uglifyOptions: { - output: { - comments: /^!/ - } - } - }), - new OptimizeCSSAssetsPlugin() - ], splitChunks: { cacheGroups: { commons: { Run npm run build Remove the following files from docs-apim/en/ in your https://github.com/wso2/docs-apim clone. theme/material/assets/javascripts/application.*.js theme/material/assets/javascripts/modernizr.*.js theme/material/assets/stylesheets/application-palette.*.css theme/material/assets/stylesheets/application.*.css theme/material/base.html Copy the the new files back to your docs-apim clone from the mkdocs-material clone you built at step 3. material/assets/javascripts/application.*.js material/assets/javascripts/modernizr.*.js material/assets/stylesheets/application* material/base.html","title":"How to patch the mkdocs-material theme to apply search optimizations"}]}